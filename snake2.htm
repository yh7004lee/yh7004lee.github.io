<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>말씀 스네이크 게임</title>
  <style>
  body {
    font-family: 'Segoe UI', 'Arial', sans-serif;
    background: #1a1d24; /* 어둡지만 블루그레이 기운 */
    color: #e0f7fa;
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 20px;
  }

  canvas {
    background: #21262e;
    border: 3px solid #f39c12;
    margin-top: 10px;
    width: calc(100vw - 20px);
    height: calc(100vw - 20px);
    max-width: 500px;
    max-height: 500px;
    border-radius: 0px;
  }

  h1 {
    color: #00e0d3;
    margin: 5px 0;
    font-size: 24px;
  }

  #verseTitle {
    color: #00e0d3;
    font-size: 20px;
    margin-bottom: 5px;
  }

  #modeDisplay {
    color: #00e0d3;
    font-size: 16px;
    margin: 5px 0;
  }

  button {
    padding: 10px 14px;
    margin: 5px;
    border: none;
    border-radius: 10px;
    background: #2a2f3a;
    color: #e0f7fa;
    font-weight: 500;
    cursor: pointer;
    flex: 1;
    transition: background 0.2s, transform 0.1s;
  }

  button:hover {
    background: #39414f;
    transform: scale(1.03);
  }

  button.selected {
    background-color: #00e0d3;
    color: #1a1d24;
    font-weight: bold;
  }

  .controls, .speed-select {
    display: flex;
    gap: 10px;
    flex-wrap: nowrap;
    justify-content: space-between;
    margin-top: 10px;
    width: 100%;
    max-width: 500px;
  }

  #verse {
    margin-top: 10px;
    font-size: 18px;
    text-align: center;
    max-width: 90vw;
    color: #b2ebf2;
  }
</style>

</head>
<body>

  <div id="verseTitle"></div>
<div class="speed-select">
  <button id="btn-beginner" onclick="setSpeed(400, '초보', this)">초보</button>
  <button id="btn-intermediate" onclick="setSpeed(250, '중수', this)">중수</button>
  <button id="btn-advanced" onclick="setSpeed(150, '고수', this)">고수</button>
  <button id="btn-master" onclick="setSpeed(80, '초인', this)">초인</button>
</div>
  <div id="modeDisplay" style="display: none;">현재 모드: 초보 모드입니다.</div>

  <canvas id="game" width="300" height="300"></canvas>

  <div class="controls">
    <button onclick="setDirection('up')">⬆️</button>
    <button onclick="setDirection('left')">⬅️</button>
    <button onclick="setDirection('down')">⬇️</button>
    <button onclick="setDirection('right')">➡️</button>
  </div>

  <div id="verse"></div>

  <script>
    const STORAGE_KEY_VERSES = 'savedVerses2';
    const canvas = document.getElementById('game');
    const ctx = canvas.getContext('2d');
    const gridSize = 10;

    let verses = [];
    let currentStage = 0;
    let verseWords = [];
    let wordIndex = 0;
    let collectedWords = [];
    let intervalId = null;
    let currentSpeed = 400;

    let snake = [{ x: 5, y: 5 }];
    let dir = { x: 0, y: 0 };
    let food = null;

function setSpeed(speed, label, btnElement = null) {
  currentSpeed = speed;
  document.getElementById('modeDisplay').innerText = `현재 모드: ${label} 모드입니다.`;
  if (intervalId) clearInterval(intervalId);
  intervalId = setInterval(update, currentSpeed);

  // 버튼 강조 표시 초기화
  const buttons = document.querySelectorAll('.speed-select button');
  buttons.forEach(btn => btn.classList.remove('selected'));

  // 클릭된 버튼 강조
  if (btnElement) {
    btnElement.classList.add('selected');
  }
}

    function setDirection(d) {
      if (d === 'up' && dir.y !== 1) dir = { x: 0, y: -1 };
      if (d === 'down' && dir.y !== -1) dir = { x: 0, y: 1 };
      if (d === 'left' && dir.x !== 1) dir = { x: -1, y: 0 };
      if (d === 'right' && dir.x !== -1) dir = { x: 1, y: 0 };
    }

    function loadStage() {
      if (currentStage >= verses.length) {
        alert('👏 모든 말씀을 완료했습니다!');
        document.getElementById('verseTitle').innerText = '';
        document.getElementById('verse').innerText = '';
        if (intervalId) clearInterval(intervalId);
        return;
      }
      const verse = verses[currentStage];
      document.getElementById('verseTitle').innerText = ` ${verse.title}`;
      
      // 대괄호 및 내용 제거 후 단어 배열 생성 (순서 유지)
      const cleanedText = verse.text.replace(/\[.*?\]/g, '').trim();
      verseWords = cleanedText.split(/\s+/);

      wordIndex = 0;
      collectedWords = [];
      resetSnake();
      placeFood();
      draw();
    }

    function resetSnake() {
      snake = [{ x: 5, y: 5 }];
      dir = { x: 0, y: 0 };
      food = null;
    }

    function placeFood() {
      let x, y;
      do {
        x = Math.floor(Math.random() * (canvas.width / gridSize));
        y = Math.floor(Math.random() * (canvas.height / gridSize));
      } while (snake.some(s => s.x === x && s.y === y));
      food = { x, y, word: verseWords[wordIndex] };
    }

    function draw() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      ctx.fillStyle = '#2ecc71';
      for (let s of snake) {
        ctx.fillRect(s.x * gridSize, s.y * gridSize, gridSize, gridSize);
      }
      if (food) {
        ctx.fillStyle = '#e74c3c';
        ctx.font = 'bold 12px Arial';

        let textWidth = ctx.measureText(food.word).width;
        const padding = 5;

        let wordX = food.x * gridSize + padding;
        if (wordX + textWidth > canvas.width - padding) {
          wordX = canvas.width - textWidth - padding;
        }
        ctx.fillText(food.word, wordX, food.y * gridSize + 10);
      }
    }

    function update() {
      if (dir.x === 0 && dir.y === 0) return;

      const head = { x: snake[0].x + dir.x, y: snake[0].y + dir.y };
      if (head.x < 0 || head.y < 0 || head.x >= canvas.width / gridSize || head.y >= canvas.height / gridSize || snake.some(s => s.x === head.x && s.y === head.y)) {
        alert('게임 오버!');
        loadStage(); // 현재 스테이지 다시 시작
        return;
      }

      snake.unshift(head);
      if (food && head.x === food.x && head.y === food.y) {
        collectedWords.push(food.word);
        wordIndex++;
        if (wordIndex >= verseWords.length) {
          document.getElementById('verse').innerText = '🎉 완성된 말씀: ' + collectedWords.join(' ');
          alert('말씀을 완성했습니다!');
          currentStage++;
          loadStage();
          return;
        }
        placeFood();
      } else {
        snake.pop();
      }
      draw();
    }

document.addEventListener('DOMContentLoaded', () => {
  const saved = localStorage.getItem(STORAGE_KEY_VERSES);
  if (!saved) {
    alert('말씀 데이터가 없습니다. localStorage에 말씀을 저장해주세요.');
    return;
  }
  verses = JSON.parse(saved);

  // 초기 모드 설정 + 버튼 강조
  const beginnerButton = document.getElementById('btn-beginner');
  setSpeed(400, '초보', beginnerButton);
  loadStage();
});

    // 터치 컨트롤
    let startX, startY;
    canvas.addEventListener('touchstart', e => {
      const touch = e.touches[0];
      startX = touch.clientX;
      startY = touch.clientY;
    });
    canvas.addEventListener('touchend', e => {
      const touch = e.changedTouches[0];
      const dx = touch.clientX - startX;
      const dy = touch.clientY - startY;
      if (Math.abs(dx) > Math.abs(dy)) {
        dx > 0 ? setDirection('right') : setDirection('left');
      } else {
        dy > 0 ? setDirection('down') : setDirection('up');
      }
    });

    document.addEventListener('keydown', (e) => {
      switch (e.key) {
        case 'ArrowUp':
          setDirection('up');
          break;
        case 'ArrowDown':
          setDirection('down');
          break;
        case 'ArrowLeft':
          setDirection('left');
          break;
        case 'ArrowRight':
          setDirection('right');
          break;
      }
    });
  </script>
</body>
</html>
