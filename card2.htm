<!DOCTYPE html>
<html lang="ko">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>퀴즈 카드</title>
<style>
/* 팝업 전체 스타일 */
.mac-popup {
  position: fixed;
  top: 0;
  left: 0;
   width: 100%;
  height: 100%;
  background: rgba(30, 30, 30, 0.96); /* 반투명 어두운 배경 */
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1111;
  padding: 12px; /* 양쪽 여백 */
  box-sizing: border-box;
}

.mac-popup-inner {
  width: 99%; 
  max-width: 1280px;
  height: 100%;
  background: #1e1e1e;
  border-radius: 12px;
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.7);
  display: flex;
  flex-direction: column;
  overflow: hidden;
  box-sizing: border-box;

  /* 추가 */
  margin: 0 auto;  /* 좌우 가운데 정렬 */
}



/* 상단 헤더 */
.mac-popup-header {
  display: flex;
  align-items: center;
  padding: 8px 16px;
  border-bottom: 1px solid #333; /* 어두운 구분선 */
  position: relative;
  background: #2a2a2a;
  border-top-left-radius: 12px;
  border-top-right-radius: 12px;
}

/* 맥 스타일 원형 버튼 3개 */
.mac-window-controls {
  display: flex;
  gap: 8px;
  position: absolute;
  left: 12px;
  top: 50%;
  transform: translateY(-50%);
}
.mac-btn {
  display: block;
  width: 12px;
  height: 12px;
  border-radius: 50%;
  box-shadow: inset 0 1px 0 rgba(255,255,255,0.3);
  cursor: default;
}
.mac-close {
  background: #ff5f56;
  border: 1px solid #bf2d2d;
}
.mac-minimize {
  background: #ffbd2e;
  border: 1px solid #b38a1f;
}
.mac-maximize {
  background: #27c93f;
  border: 1px solid #1a8f25;
}

/* 팝업 타이틀 */
.mac-popup-title {
  margin: 0 auto;
  font-weight: 600;
  font-size: 16px;
  color: #ddd;
}

/* 닫기 버튼 (우측) - 텍스트 × 만 보이도록, 두껍고 크기 키움 */
.mac-popup-close {
  position: absolute;
  right: 16px;
  top: 50%;
  transform: translateY(-50%);
  background: none;
  border: none;
  font-size: 16px; /* 크기 줄임 */
  font-weight: 900;
  color: #ff5f56;
  cursor: pointer;
  line-height: 1;
  padding: 0;
  width: auto;
  height: auto;
  user-select: none;
  transition: color 0.2s;
  display: inline-block;
}


/* 본문 영역 */
.mac-popup-body {
  padding: 16px 24px 24px;
  flex: 1; /* ← 나머지 전체 영역 차지 */
  display: flex;
  flex-direction: column;
  padding: 16px 24px 24px;
  overflow: hidden; /* 필요 시 */
}

/* 라벨 */
.popup-label {
  margin-bottom: 12px;
  font-weight: 500;
  font-size: 14px;
  color: #aaa;
}

/* 버튼 공통 스타일 */
.mac-popup-body button {
  background: #444; /* 어두운 배경 */
  color: #ddd;
  border: none;
  border-radius: 8px;
  padding: 8px 16px;
  font-size: 14px;
  cursor: pointer;
  transition: background-color 0.3s ease;
  box-shadow: 0 2px 6px rgba(0,0,0,0.4);
  user-select: none;
}
.mac-popup-body button:hover {
  background: #666;
}

  #cardSelector {
    width: 100%;
    padding: 8px 10px;
    font-size: 14px;
    border-radius: 6px;
    border: 1px solid #ccc;
    margin-bottom: 14px;
    appearance: none;
    background: white;
    cursor: pointer;
  }

  .title-edit-section {
    display: flex;
    gap: 8px;
    margin-bottom: 14px;
  }
  .title-edit-section input {
    flex-grow: 1;
    padding: 8px 10px;
    font-size: 14px;
    border-radius: 6px;
    border: 1px solid #ccc;
  }
  .title-edit-section button {
    background: #007aff;
    color: white;
    border: none;
    padding: 8px 14px;
    border-radius: 6px;
    font-weight: 600;
    cursor: pointer;
    transition: background-color 0.2s;
  }
  .title-edit-section button:hover {
    background: #005bb5;
  }

  #cardEditorTextarea {
 flex: 1; /* ← 본문 에디터가 최대한 커지도록 */
  resize: none; /* 수동 리사이즈 방지 */
    width: 100%;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
    font-size: 14px;
    padding: 10px;
    border-radius: 8px;
    border: 1px solid #ccc;
   
    height: 140px;
    margin-bottom: 20px;
    overflow-y: auto;
    line-height: 1.5;
    color: #222;
  }

  .editor-buttons {
    display: flex;
    justify-content: space-between;
  }

  .editor-buttons button {
    flex: 1;
    padding: 10px 16px;
    font-weight: 600;
    border-radius: 8px;
    border: none;
    cursor: pointer;
    transition: background-color 0.2s;
    margin: 0 4px;
  }
  .editor-buttons button:first-child {
    background: #34c759;
    color: white;
  }
  .editor-buttons button:first-child:hover {
    background: #28a745;
  }
  .editor-buttons button:last-child {
    background: #007aff;
    color: white;
  }
  .editor-buttons button:last-child:hover {
    background: #005bb5;
  }
#cardSelector {
  width: 100%;
  padding: 6px;
  margin-bottom: 12px;
  font-size: 14px;
}
.title-edit-section {
  display: flex;
  gap: 8px;
  margin-bottom: 12px;
}
.title-edit-section input {
  flex: 1;
  padding: 6px;
  font-size: 14px;
}
.title-edit-section button {
  padding: 6px 12px;
  font-size: 14px;
  cursor: pointer;
}
#cardEditorTextarea {
  width: 100%;
  resize: vertical;
  padding: 8px;
  font-size: 14px;
  line-height: 1.5;
  overflow-y: auto;
  height: 160px;
  margin-bottom: 16px;
  box-sizing: border-box;
}
.editor-buttons {
  display: flex;
  justify-content: space-between;
}
.editor-buttons button {
  padding: 8px 14px;
  font-size: 14px;
  cursor: pointer;
  border: none;
  background: #ddd;
  border-radius: 6px;
}
.editor-buttons button:hover {
  background: #ccc;
}
#cardSelector {
  width: 100%;
  padding: 6px;
  margin-bottom: 12px;
  font-size: 14px;
}
.title-edit-section {
  display: flex;
  gap: 8px;
  margin-bottom: 12px;
}
.title-edit-section input {
  flex: 1;
  padding: 6px;
  font-size: 14px;
}
.title-edit-section button {
  padding: 6px 12px;
  font-size: 14px;
  cursor: pointer;
}
#cardEditorTextarea {
  width: 100%;
  resize: vertical;
  padding: 8px;
  font-size: 14px;
  line-height: 1.5;
  overflow-y: auto;
  height: 160px;
  margin-bottom: 16px;
  box-sizing: border-box;
}
.editor-buttons {
  display: flex;
  justify-content: space-between;
}
.editor-buttons button {
  padding: 8px 14px;
  font-size: 14px;
  cursor: pointer;
  border: none;
  background: #ddd;
  border-radius: 6px;
}
.editor-buttons button:hover {
  background: #ccc;
}

.menu-item.slider-setting {
  display: flex;
  flex-direction: column;
  gap: 6px;
  padding: 8px 24px;
  font-size: 1.1rem;
  font-weight: 600;
  color: var(--text-color); /* 기존 메뉴 색상과 통일 */
}

/* 라벨 */
.menu-item.slider-setting label {
  margin-bottom: 4px;
  font-weight: 600;
  color: var(--text-color); /* 어두운 모드도 대응 */
}

/* 슬라이더 */
#fontSlider {
  appearance: none;
  width: 100%;
  height: 3px; /* ✅ 더 얇게 */
  background: linear-gradient(to right, #4caf50, #2196f3);
  border-radius: 3px;
  outline: none;
  transition: background 0.3s ease;
 margin-bottom: 16px; /* 슬라이더 아래 여백 */
}

/* 슬라이더 썸 (thumb) */
#fontSlider::-webkit-slider-thumb {
  appearance: none;
  width: 14px;
  height: 14px;
  background: white;
  border: 2px solid #2196f3;
  border-radius: 50%;
  cursor: pointer;
  transition: background 0.3s ease;
}

#fontSlider::-moz-range-thumb {
  width: 14px;
  height: 14px;
  background: white;
  border: 2px solid #2196f3;
  border-radius: 50%;
  cursor: pointer;
}

#answer-box {
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  gap: 4px;
}

.answer-wrapper {
  display: inline-flex;
  align-items: center;
  vertical-align: middle;
}

.answer-label {
  display: inline-flex;
  align-items: center;
  vertical-align: middle;
  height: 1.5em; /* 필요에 따라 조절 */
}


.answer-input {
  min-width: 3ch;
  width: auto;
  max-width: 100px;
  padding: 2px;
  text-align: center;
  height: 28px;
  line-height: 28px;
  box-sizing: border-box;
  font-size: 18px;
  /* vertical-align 제거 가능 */
}

.hint-text {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%) scale(0.85);
  color: #999999;
  font-weight: bold;
  font-size: 14px;
  max-width: 100%;
  white-space: nowrap;
  letter-spacing: 1px;
  pointer-events: none;
  user-select: none;
  display: none;
}


/* 다크 모드일 땐 검은 테두리 */
body.dark #game-icon circle {
  stroke: #000000;
}


#ghost-icon {
  transform: scale(1.15);
  transform-origin: center;
}

#random-icon {
  transform: scale(1.1);
  transform-origin: center;
  vertical-align: middle;
}

#bookmark-icon {
  transform: scale(1.05);
  transform-origin: center;
  vertical-align: middle;
}


:root {
  --bg-color: #ffffff;
  --text-color: #000000;
  --card-bg: #ffffff;
  --card-border: rgba(0, 0, 0, 0.06);
  --menu-bg: linear-gradient(180deg, #fff 0%, #e6e6e6 100%);
  --menu-hover-bg: #c8d6e5;
  --menu-divider: #eee;
}
body.dark {
  --bg-color: #121212;
  --text-color: #eeeeee;
  --card-bg: #1e1e1e;
  --card-border: rgba(255, 255, 255, 0.1);
  --menu-bg: linear-gradient(180deg, #222 0%, #333 100%);
  --menu-hover-bg: #555;
  --menu-divider: #444;
}

body {
  margin: 0;
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  background-color: var(--bg-color);
  color: var(--text-color);
  transition: background-color 0.3s, color 0.3s;
  overflow-x: hidden;
}

/* 상단바 */
.top-bar-wrapper {
  position: fixed;
  top: 0; left: 0; right: 0;
  background-color: var(--bg-color);
  z-index: 1000;
}
.top-bar {
  display: flex;
  align-items: center;
  justify-content: space-between;
  height: 56px;
  max-width: 1280px;
  margin: 0 auto;
  padding: 0 16px 0 20px;
  box-sizing: border-box;
}
@media screen and (min-width: 1312px) {
  .top-bar {
    padding: 0 2px 0 6px;
  }
}

/* 햄버거 */
.hamburger {
  width: 22px;
  height: 18px;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  cursor: pointer;
}
.hamburger span {
  display: block;
  height: 3px;
  background-color: var(--text-color);
  border-radius: 2px;
  transition: background-color 0.3s;
}

/* 우측 아이콘 */
.right-icons {
  display: flex;
  align-items: center;
  gap: 16px;
}
.right-icons svg {
  width: 28px;
  height: 28px;
  cursor: pointer;
  fill: var(--text-color);
  stroke: var(--text-color);
  transition: fill 0.3s ease, stroke 0.3s ease;
  -webkit-tap-highlight-color: transparent;
}
svg {
  width: 28px;
  height: 28px;
  stroke: var(--text-color);
  fill: none;
  cursor: pointer;
  transition: stroke 0.3s, fill 0.3s;
}

.settings-icon path,
.settings-icon circle {
  fill: none;
  stroke: var(--text-color);
}
body.dark .settings-icon path,
body.dark .settings-icon circle {
  fill: none;
  stroke: var(--text-color);
}

/* 메뉴 */
.menu-wrapper {
  position: absolute;
  top: 56px;
  left: 0; right: 0;
  display: flex;
  justify-content: center;
  z-index: 999;
}
.menu {
  background: var(--menu-bg);
  border-radius: 0 0 12px 12px;
  box-shadow: 0 12px 24px rgba(0,0,0,0.25);
  display: none;
  flex-direction: column;
  width: 100%;
  max-width: 1280px;
  max-height: 600px;
  overflow-y: auto;
  user-select: none;
  font-weight: 600;
  font-size: 1.1rem;
  color: var(--text-color);
  animation: slideDown 0.3s ease forwards;
}
.menu.show {
  display: flex;
}
.menu div {
  padding: 8px 24px;
  cursor: pointer;
  border-bottom: 1px solid var(--menu-divider);
  transition: background-color 0.25s, color 0.25s;
}
.menu div:last-child {
  border-bottom: none;
}
.menu div:hover {
  background-color: var(--menu-hover-bg);
  color: #0056b3;
}
.menu::-webkit-scrollbar {
  width: 8px;
}
.menu::-webkit-scrollbar-thumb {
  background: #888;
  border-radius: 4px;
}
.menu::-webkit-scrollbar-thumb:hover {
  background: #555;
}
@keyframes slideDown {
  0% {opacity: 0; transform: translateY(-10px);}
  100% {opacity: 1; transform: translateY(0);}
}

/* 본문 */
.content {
  position: absolute;
  top: 56px;
  left: 0;
  right: 0;
  bottom: 0;
  padding: 14px 16px 24px 16px;
  max-width: 1280px;
  margin: 0 auto;
  user-select: none;
  touch-action: pan-y;
  overflow-y: auto;       /* ✅ 안드로이드 스크롤 핵심 */
  overscroll-behavior: contain; /* ✅ 스크롤 튕김 효과 제어 (선택사항) */
}

/* 카드 (공통) */
.card {
  background-color: var(--card-bg);
  border-radius: 12px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
  padding: 18px 22px;
  margin-bottom: 25px;
  border: 1px solid var(--card-border);
  transition: background-color 0.3s, box-shadow 0.3s, border 0.3s;
}

/* 🎀 화이트 모드에서 깜찍한 점선 테두리 적용 */
body:not(.dark) .title-card {
  border: 1px solid #e35c6a;  /* 기존 #ff9aa2 → 좀 더 진한 코랄 핑크 */
  background-color: #fff0f2;
  color: #e35c6a !important;
}

body:not(.dark) .question {
  border: 1px solid #e6a548;  /* 기존 #fbc687 → 좀 더 진한 살구 오렌지 */
  background-color: #fff5e0;
  color: #e6a548 !important;
}

body:not(.dark) .answer {
  border: 1px solid #56b89e;  /* 기존 #b5ead7 → 좀 더 진한 민트 그린 */
  background-color: #e6f6f3;
  color: #56b89e !important;
}

body:not(.dark) .favorite-card {
  border: 1px solid #7b7fe3;  /* 기존 #c7ceea → 진한 라벤더 블루 */
  background-color: #f0f0ff;
  color: #7b7fe3 !important;
}



/* 제목 */
.title-card {
  font-size: 1.6rem;
  font-weight: 600;
  color: #ff6f61;
  text-align: left;
  letter-spacing: 0.5px;
}
body.dark .title-card {
  color: #1ABC9C
}

/* 질문 */
.question {
  font-size: 1.6rem;
  font-weight: 500;
  color: #0077cc;
  line-height: 1.6;
}
body.dark .question {
  color: #3399ff;
}

/* 답변 */
.answer {
  font-size: 1.6rem;
  font-weight: 500;
  color: #333;
  line-height: 1.7;
  transition: opacity 0.3s ease;
}
body.dark .answer {
  color: #ddd;
}

/* 답변 숨김 처리 스타일 */
.answer.hidden {
  opacity: 0;
  pointer-events: none;
  height: 0;
  margin: 0;
  padding: 0;
  overflow: hidden;
}

/* 즐겨찾기 라벨 */
.favorite-label {
  font-size: 1.6rem;
  font-weight: 500;
  line-height: 1.6;

}
body.dark .favorite-label {
  color: #3399ff;
}

/* 활성화된 아이콘 색상 처리 */


/* 네온 빛나는 애니메이션 */
@keyframes neonPulseBlue {
  0%, 100% {
    filter: drop-shadow(0 0 2px #00aaff) drop-shadow(0 0 4px #00aaff);
  }
  50% {
    filter: drop-shadow(0 0 4px #00ccff) drop-shadow(0 0 8px #00ccff);
  }
}
@keyframes neonPulseCyan {
  0%, 100% {
    filter: drop-shadow(0 0 2px #00e6d8) drop-shadow(0 0 4px #00e6d8);
  }
  50% {
    filter: drop-shadow(0 0 4px #1abc9c) drop-shadow(0 0 8px #1abc9c);
  }
}

/* 공통 네온 효과 (활성화된 아이콘 중 neon-icon 클래스만 적용됨) */
svg.active {
  animation-duration: 1.8s;
  animation-timing-function: ease-in-out;
  animation-iteration-count: infinite;
}

/* 화이트 모드용 푸른빛 네온 */
body:not(.dark) svg.active {
  animation-name: neonPulseBlue;
}

/* 다크모드용 청록빛 네온 */
body.dark svg.active {
  animation-name: neonPulseCyan;
}


.icon-button.active {
  filter: drop-shadow(0 0 4px #00ffff) drop-shadow(0 0 8px #00ffff);
  transition: filter 0.3s ease;
}

.card.slide-left {
  animation: slideLeft 0.3s ease;
}
.card.slide-right {
  animation: slideRight 0.3s ease;
}

@keyframes slideLeft {
  0% {
    transform: translateX(100%);
    opacity: 0;
  }
  100% {
    transform: translateX(0);
    opacity: 1;
  }
}

@keyframes slideRight {
  0% {
    transform: translateX(-100%);
    opacity: 0;
  }
  100% {
    transform: translateX(0);
    opacity: 1;
  }
}
/* 설정 아이콘과 메뉴 관련 스타일 */
/* 공통 풀다운 메뉴 스타일 */
.dropdown {
  display: none;
  position: absolute;
  top: 48px; /* 메뉴바 높이에 맞게 조절 */
  left: 10px; /* 메뉴 버튼 기준 위치 (필요 시 right: auto; 제거) */
  background-color: #fff;
  border: 1px solid #ccc;
  border-radius: 10px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  padding: 15px;
  width: 250px;
  z-index: 1000;
}

.dropdown.active {
  display: block;
  animation: fadeIn 0.25s ease;
}

@keyframes fadeIn {
  from { opacity: 0; transform: translateY(-10px); }
  to { opacity: 1; transform: translateY(0); }
}

.dropdown label {
  font-weight: bold;
  margin-top: 10px;
  display: block;
}

.dropdown input[type="range"] {
  width: 100%;
  margin-top: 4px;
}

.menu-item {
  margin-top: 12px;
  color: #333;
  cursor: pointer;
}

.menu-item:hover {
  text-decoration: underline;
}


/* 버튼 스타일 */
#game-buttons {
  display: none; /* 기본은 숨김 */
  flex-direction: column;
  gap: 20px;
  margin-top: 20px;
}

#game-buttons button {
  width: 100%;
  padding: 14px 0;
  font-size: 17px;
  border: none;
  border-radius: 10px;
  cursor: pointer;
  font-weight: 700;
  box-shadow: 0 4px 8px rgba(0,0,0,0.1);
  transition:
    background-color 0.3s ease,
    box-shadow 0.3s ease,
    transform 0.2s ease,
    color 0.3s ease;
}

/* 화이트 모드 */
body:not(.dark) #game-buttons button {
  background: linear-gradient(135deg, #56b89e, #4aa086);
  color: #fff;
  box-shadow: 0 4px 15px rgba(86, 184, 158, 0.5);
}

body:not(.dark) #game-buttons button:hover,
body:not(.dark) #game-buttons button:focus,
body:not(.dark) #game-buttons button:active {
  background: linear-gradient(135deg, #4aa086, #3e7a6f);
  box-shadow: 0 4px 15px rgba(86, 184, 158, 0.7), inset 0 0 8px #56b89e;

}

/* 다크 모드 */
body.dark #game-buttons button {
  background: linear-gradient(135deg, #2e2e2e, #444444);
  color: #eee;
  box-shadow: 0 4px 10px rgba(0,0,0,0.7);
}

body.dark #game-buttons button:hover,
body.dark #game-buttons button:focus,
body.dark #game-buttons button:active {
  background: linear-gradient(135deg, #444444, #5a5a5a);
  box-shadow: 0 4px 15px rgba(0,0,0,0.9), inset 0 0 8px #6affc1;
  border: 2px solid #6affc1;
}

.answer-input {
  width: 100px;
  max-width: 120px;
  height: 38px;
  padding: 6px 12px;
  font-size: 16px;
  border: 2px solid #56b89e; /* 변경된 테두리 색상 */
  border-radius: 8px;
  box-sizing: border-box;
  background-color: #fff;
  color: #333;
  transition: border-color 0.3s ease, background-color 0.3s ease, color 0.3s ease;
}

.answer-input:focus {
  border-color: #3d8f7a; /* 좀 더 진한 색상으로 포커스 표시 */
  outline: none;
  box-shadow: 0 0 6px rgba(86, 184, 158, 0.6);
  background-color: #fff;
  color: #222;
}

/* 다크모드 적용 시 */
body.dark .answer-input {
  background-color: #2a2a2a;
  color: #eee;
  border-color: #555;
}

body.dark .answer-input:focus {
  border-color: #5599ff;
  box-shadow: 0 0 8px rgba(85,153,255,0.7);
  background-color: #333;
  color: #fff;
}
.answer-input {
  font-weight: bold;
  font-size: 18px;
  letter-spacing: 2px;
  text-align: center;
  border: 1px solid #56b89e; /* 화이트모드 테두리 */
  border-radius: 6px;
  padding: 4px 8px;
  width: 100px; /* 적절한 너비 */
  height: 33px; /* 높이 좀 키우기 */
  box-sizing: border-box;
}

/* 슬라이더 꾸미기 */
  .slider-container {
    padding: 8px 14px;
  }

  #fontSlider {
    -webkit-appearance: none;
    width: 100%;
    height: 8px;
    border-radius: 4px;
    background: linear-gradient(to right, #4caf50, #2196f3);
    outline: none;
    transition: background 0.3s ease;
  }

  #fontSlider::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 18px;
    height: 18px;
    border-radius: 50%;
    background: white;
    border: 2px solid #2196f3;
    cursor: pointer;
    transition: background 0.3s ease;
  }

  #fontSlider::-moz-range-thumb {
    width: 18px;
    height: 18px;
    border-radius: 50%;
    background: white;
    border: 2px solid #2196f3;
    cursor: pointer;
  }

</style>
</head>
<body>

<div class="top-bar-wrapper">
  <div class="top-bar">
    <div class="hamburger" onclick="toggleMenu()">
      <span></span><span></span><span></span>
    </div>
    <div class="right-icons">


<svg id="game-icon" viewBox="0 0 26 26" fill="none" stroke="none">
  <g transform="translate(2.6 1.2) scale(1.3 1.5)">
    <!-- 좌우 대칭 조이스틱 외곽 -->
    <path
      fill="#000000"
      d="
        M0 13
        Q1.5 14.5, 4 13
        L6.5 10.5
        H9.5
        L12 13
        Q14.5 14.5, 16 13
        L15.2 4.8
        Q15 2.8, 12.3 2
        H3.7
        Q1 2.8, 0.8 4.8
        L0 13
        Z
      "
    />

    <!-- 왼쪽 + 기호 (살짝 아래로) -->
    <line x1="2.25" y1="6.8" x2="6.75" y2="6.8" stroke="#ffffff" stroke-width="1.5" stroke-linecap="butt"/>
    <line x1="4.5"  y1="4.8" x2="4.5"  y2="8.8" stroke="#ffffff" stroke-width="1.5" stroke-linecap="butt"/>

    <!-- 오른쪽 큰 버튼 (살짝 아래로) -->
    <circle cx="11.5" cy="6.8" r="2" fill="#ffffff"/>
  </g>
</svg>




<!-- 주사위 아이콘 -->
<svg id="random-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" 
  style="fill:none;" >
  <g transform="translate(2.4 2.4) scale(0.82)">
    <rect x="2" y="2" width="20" height="20" rx="3" ry="3" fill="none"/>
    <circle cx="12" cy="12" r="1" fill="currentColor"/>
    <circle cx="7"  cy="7"  r="1" fill="currentColor"/>
    <circle cx="17" cy="7"  r="1" fill="currentColor"/>
    <circle cx="7"  cy="17" r="1" fill="currentColor"/>
    <circle cx="17" cy="17" r="1" fill="currentColor"/>
  </g>
</svg>




<!-- 유령 아이콘 -->
<svg id="ghost-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
  <path d="M4.8 10
           a7.2 7.2 0 1 1 14.4 0v10
           c0 .3-.3.5-.6.3
           l-2.2-1.5-2.2 1.5-2.2-1.5-2.2 1.5-2.2-1.5-2.2 1.5
           c-.3.2-.6 0-.6-.3V10z"
        fill="currentColor" stroke="none"/>
<circle cx="9.5" cy="11" r="2.2" fill="var(--bg-color)"/>
<circle cx="14.5" cy="11" r="2.2" fill="var(--bg-color)"/>
</svg>

<!-- 북마크 아이콘 -->
<svg id="bookmark-icon" viewBox="0 0 24 24" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
  <path d="M6 4h12a1 1 0 0 1 1 1v14.5a0.5 0.5 0 0 1-0.8 0.4L12 13.3l-6.2 6.6a0.5 0.5 0 0 1-0.8-0.4V5a1 1 0 0 1 1-1z" />
</svg>

<!-- 다크모드 아이콘 -->
<svg id="dark-icon" viewBox="0 0 24 24" stroke-width="2"  >
  <path d="M21 12.79A9 9 0 1 1 11.21 3a7 7 0 1 0 9.79 9.79z"/>
</svg>

<svg id="light-icon" viewBox="0 0 24 24" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: none;">
  <circle cx="12" cy="12" r="5"/>
  <line x1="12" y1="1" x2="12" y2="3"/>
  <line x1="12" y1="21" x2="12" y2="23"/>
  <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"/>
  <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"/>
  <line x1="1" y1="12" x2="3" y2="12"/>
  <line x1="21" y1="12" x2="23" y2="12"/>
  <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"/>
  <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"/>
</svg>


<!-- 설정 아이콘 -->
<svg class="settings-icon" viewBox="0 0 24 24" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" 
     onclick="toggleSettingsMenu()" style="cursor:pointer; width:28px; height:28px;">
  <path d="M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z"/>
  <circle cx="12" cy="12" r="3"/>
</svg>
    </div>
  </div>
</div>





<div class="menu-wrapper">
  <div class="menu" id="menu">
    <!-- 메뉴 아이템 JS로 채움 -->
  </div>
</div>


<!-- 설정 메뉴 -->
<div class="menu-wrapper">
  <div class="menu" id="settings-menu">
<!-- 글자 사이즈 라벨과 슬라이더 통합 -->
<div class="menu-item slider-setting">
<label for="fontSlider" id="fontSizeLabel">글자 크기 조절</label>
  <input type="range" id="fontSlider" min="0" max="6" value="2" step="1">
</div>
    <div onclick="resetFontSize()">글자사이즈 초기화</div>
    <div onclick="createCustomCard()">암기카드 백업 복원</div>
    <div onclick="openCardEditorPopup()">암기카드 추가 편집</div>
    <div onclick="showHelp()">도움말</div>
    <div onclick="exitApp(); closeSettingsMenu();" style="color: rgb(255, 68, 68); font-weight: 600;">나가기</div>
  </div>
</div>



<div  class="content" id="content">
<div class="card title-card font-adjust" id="title-box"></div>
<div class="card question font-adjust" id="question-box"></div>
<div class="card answer font-adjust" id="answer-box"></div>

    <div id="game-buttons" class="button-group">
      <button id="hint-btn">힌트 보기</button>
      <button id="check-btn">정답 확인</button>
    </div>


  <!-- 즐겨찾기 카드 추가 -->
  <div id="bookmark-wrapper" class="card favorite-card">
    
<label class="favorite-label font-adjust" style="display: inline-flex; align-items: center; gap: 12px; cursor: pointer;">
  즐겨찾기 추가
  <input type="checkbox" id="bookmark-checkbox" style="width: 1.2em; height: 1.2em; vertical-align: middle; accent-color: #ff6f61;">
</label>
        
  </div>

</div>






<div id="tooltip" style="
  position: fixed;
  top: 60px;
  left: 50%;
  transform: translateX(-50%) scale(0.95);
  background: linear-gradient(135deg, #5a4de6, #8c77ff);
  color: #fff;
  padding: 10px 16px;
  border-radius: 8px;
  font-size: 1.1rem;
  font-weight: 500;
  z-index: 9999;
  display: none;
  opacity: 0;
  transition: opacity 0.3s ease, transform 0.3s ease;
  white-space: normal;
  max-width: 350px;
  box-sizing: border-box;
  text-align: center;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.4);
  pointer-events: none;
  text-shadow: 0 1px 2px rgba(0,0,0,0.3);
  word-break: break-word;

"></div>

<!-- 🔵 맥 스타일 팝업 -->
<div class="mac-popup" id="cardEditorPopup" style="display:none">
  <div class="mac-popup-inner"  style="box-shadow: 0 0 10px rgba(0,255,255,0.5), 0 0 20px rgba(0,255,255,0.7), 0 0 40px rgba(0,255,255,0.9); border-radius: 16px; ">
  <div class="mac-popup-header">
    <!-- 맥 스타일 원형 버튼 3개 -->
    <div class="mac-window-controls">
      <span class="mac-btn mac-close"></span>
      <span class="mac-btn mac-minimize"></span>
      <span class="mac-btn mac-maximize"></span>
    </div>
    <span class="mac-popup-title">암기카드 리스트 편집</span>
    <button class="mac-popup-close" onclick="closeCardEditorPopup()">&#10005;</button>
  </div>
  <div class="mac-popup-body">
  <div class="popup-label">편집할 암기카드를 선택하세요.</div>
  <select id="cardSelector" onchange="onCardTitleChange()" 
    style="appearance: auto; -webkit-appearance: auto; -moz-appearance: auto; width: 100%; padding: 6px 24px 6px 8px; font-size: 16px; 
    background-color: #1e1e1e; color: #aaa; border: 1px solid #444;">
  </select>

  <div class="title-edit-section" style="display: flex; gap: 6px; align-items: center;">
    <div style="pointer-events: none; background-color: #2a2a2a; color: #ccc; border: 1px solid #444; border-radius: 6px; padding: 4px 10px; font-size: 14px; height: 25px; display: flex; align-items: center;">
      제목 : 
    </div>
    <input type="text" id="cardTitleInput" style="flex: 1; padding: 4px 10px; font-size: 14px; border: 1px solid #444; border-radius: 6px; background-color: #1e1e1e; color: #aaa; height: 25px;"
      value="제목을 입력하세요"
      onfocus="if(this.value==='제목을 입력하세요'){this.value=''; this.style.color='#eee';}"
      onblur="if(this.value===''){this.value='제목을 입력하세요'; this.style.color='#aaa';}">
  </div>

  <textarea id="cardEditorTextarea" rows="8" 
    style="width: 100%; padding: 8px; font-size: 14px; background-color: #1e1e1e; color: #aaa; border: 1px solid #444; border-radius: 6px;">
  </textarea>

    <div class="editor-buttons">
      <button onclick="prepareNewCard()">새카드 만들기</button>
      <button onclick="applyCardChanges()">적용</button>
    </div>
 </div> </div>
</div>

<script src="fireworks.js"></script>
<script src="quizData.js"></script>
<script src="tooltip.js"></script>
<script src="swipeHandler.js"></script>

<script>

const menu = document.getElementById('menu');
const questionBox = document.getElementById('question-box');
const answerBox = document.getElementById('answer-box');
const titleBox = document.getElementById('title-box');
const bookmarkCheckbox = document.getElementById('bookmark-checkbox');
const bookmarkIcon = document.getElementById('bookmark-icon');
const ghostIcon = document.getElementById('ghost-icon');
const randomIcon = document.getElementById('random-icon');
const darkIcon = document.getElementById('dark-icon');
const lightIcon = document.getElementById('light-icon');
const content = document.getElementById('content');

let currentCategory = null;
let currentIndex = 0;
let categories = Object.keys(quizData);
let ghostMode = false;    // 답변 숨김 모드
let randomMode = false;   // 랜덤 스와이프 모드
let favoriteFilter = false; // 즐겨찾기 필터 모드
let favorites = new Set();  // 즐겨찾기 문제 인덱스 저장, 여기서는 인덱스 번호 대신 고유키 사용 예정

// 1. 메뉴 생성 및 선택 기능
function createMenu() {
  menu.innerHTML = '';
  categories.forEach(cat => {
    const div = document.createElement('div');
    div.textContent = cat;
    div.onclick = () => {
      currentCategory = cat;
      currentIndex = 0;

  // 🔽 여기 추가!
  gameMode = false;
  gameIcon.classList.remove('active'); // 아이콘 상태 초기화
  document.getElementById('game-buttons').style.display = 'none';
  document.getElementById('bookmark-wrapper').style.display = 'flex';

      ghostMode = false;
      randomMode = false;
      favoriteFilter = false;
      updateIconsState();
      bookmarkCheckbox.checked = false;
      showMenu(false);
      renderCard();
      saveStatesToStorage();
    };
    menu.appendChild(div);
  });

  // 나가기 버튼 추가
  const exitBtn = document.createElement('div');
  exitBtn.textContent = '나가기';
  exitBtn.style.color = '#ff4444';
  exitBtn.style.fontWeight = 'bold';
  exitBtn.onclick = () => {
    showMenu(false);
  };
  menu.appendChild(exitBtn);
}


// 메뉴 보이기/숨기기 토글
function toggleMenu() {
  const isShown = menu.classList.contains('show');

  if (isShown) {
    menu.classList.remove('show');
    document.removeEventListener('click', outsideMenuClickHandler);
  } else {
    menu.classList.add('show');
    setTimeout(() => {
      document.addEventListener('click', outsideMenuClickHandler);
    }, 0);
  }
}
function outsideMenuClickHandler(e) {
  const hamburger = document.querySelector('.hamburger');
  if (!menu.contains(e.target) && !hamburger.contains(e.target)) {
    menu.classList.remove('show');
    document.removeEventListener('click', outsideMenuClickHandler);
  }
}
// 2. 카드 렌더링 함수
function renderCard() {
  if (!currentCategory) return;
  const data = quizData[currentCategory];

  // 즐겨찾기 필터가 켜져 있으면 즐겨찾기만 필터링
  let filteredData = data;
  if (favoriteFilter) {
    filteredData = data.filter((item, idx) => favorites.has(getKey(currentCategory, idx)));
    if(filteredData.length === 0){
      questionBox.textContent = '즐겨찾기된 항목이 없습니다.';
      answerBox.textContent = '';
      titleBox.textContent = (currentCategory ? '🎯 ' + currentCategory : '');
      return;
    }
  }

if (randomMode) {
  if (shufflePointer >= shuffledIndices.length) {
    initShuffledIndices();  // 다시 셔플
  }
  currentIndex = shuffledIndices[shufflePointer];
} else {
  // 순차 인덱스 보정
  if (currentIndex >= filteredData.length) currentIndex = 0;
  else if (currentIndex < 0) currentIndex = filteredData.length - 1;
}

  const card = filteredData[currentIndex];
  titleBox.textContent = (currentCategory ? '🎯 ' + currentCategory : '');
  const realIndex = getRealIndex(currentIndex);
  questionBox.textContent = (realIndex + 1) + '. ' + card.Q;
  if (ghostMode) {
    // 답변 숨김 처리
    answerBox.classList.add('hidden');
  } else {
    answerBox.classList.remove('hidden');
    answerBox.textContent = card.A;
  }
  // 체크박스 동기화
  const key = getKey(currentCategory, getRealIndex(currentIndex));
  bookmarkCheckbox.checked = favorites.has(key);
}

// 즐겨찾기 체크박스 클릭 처리
bookmarkCheckbox.addEventListener('change', () => {
  if (!currentCategory) return;
  const realIndex = getRealIndex(currentIndex);
  const key = getKey(currentCategory, realIndex);

  if (bookmarkCheckbox.checked) {
    favorites.add(key);
  } else {
    favorites.delete(key);

    // 즐겨찾기 모드 중인데, 해당 카테고리의 즐겨찾기가 0개가 되면 필터 해제
    const hasFavorites = Array.from(favorites).some(k => k.startsWith(currentCategory + '_'));
    if (favoriteFilter && !hasFavorites) {
      favoriteFilter = false;
      showTooltip('즐겨찾기 항목이 없어 필터 모드가 해제되었습니다.');
      updateIconsState();
    }
  }

  saveStatesToStorage();
  renderCard();
});
// 현재 보여지는 카드의 실제 인덱스 찾기 (필터링 때문에 달라짐)
function getRealIndex(currentFilteredIndex) {
  if (!favoriteFilter) return currentFilteredIndex;
  const data = quizData[currentCategory];
  // favoriteFilter = true라면 필터링된 인덱스 -> 원본 인덱스 변환 필요
  const filteredIndices = [];
  for(let i=0; i<data.length; i++) {
    if(favorites.has(getKey(currentCategory, i))) filteredIndices.push(i);
  }
  return filteredIndices[currentFilteredIndex] ?? 0;
}

// 카테고리 + 인덱스 문자열 키 생성
function getKey(category, index) {
  return category + '_' + index;
}

// 3. 아이콘 상태 업데이트 (색상 활성화 반영)
function updateIconsState() {
  // 다크모드
  if (document.body.classList.contains('dark')) {
    darkIcon.style.display = 'none';
    lightIcon.style.display = 'inline';
  } else {
    darkIcon.style.display = 'inline';
    lightIcon.style.display = 'none';
  }
  // 즐겨찾기 아이콘 활성화 여부 (즐겨찾기 필터 켜짐)
  if (favoriteFilter) bookmarkIcon.classList.add('active');
  else bookmarkIcon.classList.remove('active');
  // 유령 아이콘 활성화 여부 (답변 숨김)
  if (ghostMode) ghostIcon.classList.add('active');
  else ghostIcon.classList.remove('active');
  // 랜덤 모드 아이콘 활성화 여부
  if (randomMode) randomIcon.classList.add('active');
  else randomIcon.classList.remove('active');
}

// 4. 다크모드 토글 함수
function toggleDarkMode() {
  document.body.classList.toggle('dark');
  updateIconsState();
  // 상태 저장
  localStorage.setItem('darkMode', document.body.classList.contains('dark') ? '1' : '0');
}

// 5. 유령 모드 토글 (답변 숨김/보임)
function toggleGhostMode() {
  ghostMode = !ghostMode;
  updateIconsState();
  renderCard();
  setTimeout(() => {
    showTooltip(ghostMode ? '정답이 숨겨졌습니다.' : '정답이 표시됩니다.');
  }, 10); // renderCard 후 툴팁 출력 타이밍을 보장
}
// 6. 랜덤 모드 토글 (스와이프 모드 전환)

let shuffledIndices = [];   // 랜덤 순서 배열
let shufflePointer = 0;     // 현재 인덱스 위치

function toggleRandomMode() {
  const cardCount = getFilteredLength();
  if (cardCount <= 2) {
    showTooltip('지금 카드의 숫자가 2개 이하라서 랜덤모드를 사용할 수 없습니다.');
    return;
  }

  randomMode = !randomMode;
  updateIconsState();

  if (randomMode) {
    initShuffledIndices(); // 랜덤 모드 켤 때 초기화
    showTooltip('랜덤 모드가 활성화되었습니다.');
  } else {
    showTooltip('순차 모드가 활성화되었습니다.');
  }
}

function initShuffledIndices() {
  const count = getFilteredLength();
  shuffledIndices = Array.from({ length: count }, (_, i) => i);

  // Fisher-Yates Shuffle
  for (let i = shuffledIndices.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [shuffledIndices[i], shuffledIndices[j]] = [shuffledIndices[j], shuffledIndices[i]];
  }

  shufflePointer = 0;
}

// 7. 즐겨찾기 필터 토글 (북마크 아이콘 클릭)
function toggleBookmarkMode() {
  if (!favoriteFilter) {
    // 필터를 켜려고 할 때 즐겨찾기 항목이 아예 없으면 차단
    if (favorites.size === 0) {
      showTooltip('즐겨찾기 추가된 카드가 하나도 없습니다.');
      return;
    }

    // 현재 카테고리에 해당하는 즐겨찾기 항목이 없으면 차단
    const data = quizData[currentCategory];
    const hasFavorites = data.some((item, idx) => favorites.has(getKey(currentCategory, idx)));
    if (!hasFavorites) {
      showTooltip('즐겨찾기 추가된 카드가 하나도 없습니다.');
      return;
    }

    // 🎯 랜덤모드가 켜져 있는데 즐겨찾기 항목이 2개 이하인 경우 자동 해제
    const filtered = data.filter((item, idx) => favorites.has(getKey(currentCategory, idx)));
    if (randomMode && filtered.length <= 2) {
      randomMode = false;
      updateIconsState();
      showTooltip('즐겨찾기 카드 수가 부족하여 랜덤모드가 비활성화되었습니다.');
    }
  }

  favoriteFilter = !favoriteFilter;
  updateIconsState();
  showTooltip(favoriteFilter ? '즐겨찾기 추가된 카드만 노출됩니다.' : '전체 카드가 노출됩니다.');
  currentIndex = 0;  // 필터 변경시 인덱스 초기화
  renderCard();
}



// 필터링 적용 후 길이 반환
function getFilteredLength() {
  if (!currentCategory) return 0;
  let data = quizData[currentCategory];
  if (favoriteFilter) {
    data = data.filter((item, idx) => favorites.has(getKey(currentCategory, idx)));
  }
  return data.length;
}
// 9. 상태 로컬 저장 / 복원
function saveStatesToStorage() {
  // 즐겨찾기 목록 저장(문자열로)
  localStorage.setItem('favorites', JSON.stringify(Array.from(favorites)));

  // 다크모드 저장 (이미 위 toggleDarkMode에서 저장 중)

  // 현재 카테고리 저장
  localStorage.setItem('currentCategory', currentCategory || '');

  // 즐겨찾기 필터 저장
  localStorage.setItem('favoriteFilter', favoriteFilter ? '1' : '0');
}

// 즐겨찾기 복원
function loadFavoritesFromStorage() {
  const favs = localStorage.getItem('favorites');
  if (favs) {
    try {
      const arr = JSON.parse(favs);
      favorites = new Set(arr);
    } catch {
      favorites = new Set();
    }
  }
}

// 전체 상태 복원
function loadStatesFromStorage() {
  // 🔽 추가: 전체 카드 복원
  const savedAll = localStorage.getItem('allQuizData');
  if (savedAll) {
    try {
      const parsed = JSON.parse(savedAll);
      Object.assign(quizData, parsed); // 기존 quizData 덮어쓰기
      categories = Object.keys(quizData);
    } catch(e) {
      console.warn('quizData 복원 실패:', e);
    }
  }

  // 기존 상태 복원 로직 계속...
  const dark = localStorage.getItem('darkMode');
  if (dark === '1') document.body.classList.add('dark');
  else document.body.classList.remove('dark');

  loadFavoritesFromStorage();

  const savedCat = localStorage.getItem('currentCategory');
  currentCategory = (savedCat && categories.includes(savedCat)) ? savedCat : categories[0];

  favoriteFilter = false;
  ghostMode = false;
  randomMode = false;

  updateIconsState();
  renderCard();
  bookmarkCheckbox.checked = favoriteFilter;
}

// 10. 아이콘 클릭 이벤트 연결
darkIcon.onclick = () => {
  toggleDarkMode();
  saveStatesToStorage();
};
lightIcon.onclick = () => {
  toggleDarkMode();
  saveStatesToStorage();
};

bookmarkIcon.onclick = () => {
  toggleBookmarkMode();
  saveStatesToStorage();
};

randomIcon.onclick = () => {
  toggleRandomMode();
  saveStatesToStorage();
};

ghostIcon.onclick = () => {
  if (gameMode) {
    showTooltip("게임모드에서는 유령모드를 사용할 수 없습니다.");
    return;
  }

  ghostMode = !ghostMode;
  updateIconsState();

  // 툴팁 먼저 띄움 (renderCard보다 먼저)
  setTimeout(() => {
    showTooltip(ghostMode ? "정답이 숨겨졌습니다." : "정답이 표시됩니다.");
  }, 10);

  renderCard();
};
// 11. 페이지 초기화
createMenu();
loadStatesFromStorage();

// 메뉴 처음에 표시
showMenu(false);

// 메뉴 표시/숨기기 함수
function showMenu(show) {
  if (show) menu.classList.add('show');
  else menu.classList.remove('show');
}

//글자 크기 조정

//게임클릭
const hintBtn = document.getElementById('hint-btn');
const checkBtn = document.getElementById('check-btn');
const gameIcon = document.getElementById('game-icon');
let gameMode = false;

// 게임 아이콘 클릭 이벤트
gameIcon.onclick = () => {
  gameMode = !gameMode;

  if (gameMode) {
    showTooltip("게임모드로 변경합니다.");
    gameIcon.classList.add('active');

    // ✅ 유령모드 자동 해제
    if (ghostMode) {
      ghostMode = false;
      updateIconsState();  // 아이콘 상태 반영
      setTimeout(() => {
        showTooltip("게임모드로 전환되며 유령모드가 해제되었습니다.");
      }, 10);  // 툴팁이 덮어씌워지지 않도록 약간 지연
    }

  } else {
    showTooltip("게임모드를 해제합니다.");
    gameIcon.classList.remove('active');

    // 🟡 게임모드 해제 상태에서 유령모드가 꺼져 있으면, 유령모드 툴팁이 다음 클릭 시 잘 나오게 준비됨
  }

  const gameButtons = document.getElementById('game-buttons');
  if (gameButtons) {
    gameButtons.style.display = gameMode ? 'flex' : 'none';
  }

  const bookmarkWrap = document.getElementById('bookmark-wrapper');
  if (bookmarkWrap) {
    bookmarkWrap.style.display = gameMode ? 'none' : 'flex';
  }

  updateIconsState();  // 아이콘 상태 동기화
  renderCard();  // 카드 다시 그림
};


// 정답 박스에서 인풋으로 바꿔줄 단어를 선택
function convertAnswerToInputs(answer) {
  const words = answer.split(/\s+/);
  const indexes = [];

  for (let i = 0; i < words.length; i++) {
    const clean = words[i].replace(/[^\p{L}\p{N}]/gu, '');
    if (clean.length > 1) indexes.push(i);
  }

  const selected = indexes.sort(() => 0.5 - Math.random()).slice(0, 3);

  return words.map((word, idx) => {
    if (selected.includes(idx)) {
      const punctuation = word.match(/[.,!?]$/);
      const cleanWord = word.replace(/[.,!?]/g, '');

      return `
        <span class="answer-wrapper">
          <input type="text" class="answer-input" data-answer="${cleanWord}" autocomplete="off" />
          <span class="hint-text"></span>
        </span>
        ${punctuation ? punctuation[0] : ''}
      `;
    } else {
      return `<span class="answer-label">${word}</span>`;
    }
  }).join(' ');
}
// 힌트 보기 기능

function getChoseong(text) {
  const CHOSEONG_LIST = ['ㄱ', 'ㄲ', 'ㄴ', 'ㄷ', 'ㄸ', 'ㄹ', 'ㅁ', 'ㅂ', 'ㅃ', 'ㅅ',
                        'ㅆ', 'ㅇ', 'ㅈ', 'ㅉ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ'];
  return Array.from(text).map(char => {
    const code = char.charCodeAt(0);
    if (code >= 0xAC00 && code <= 0xD7A3) {
      const choseongIndex = Math.floor((code - 0xAC00) / 588);
      return CHOSEONG_LIST[choseongIndex];
    }
    return char; // 한글 아니면 그대로
  }).join('');
}

function applyHint() {
  const inputs = document.querySelectorAll('.answer-input');
  inputs.forEach(input => {
    const answer = input.dataset.answer.trim();
    const userInput = input.value.trim();

    if (userInput === answer) {
      // 정답이 이미 입력된 경우 placeholder 지움
      input.placeholder = '';
      return;
    } else if (userInput !== "") {
      // 오답이 입력된 경우 입력값 초기화
      input.value = '';
    }

    // 힌트 생성 (한글 초성 또는 영어 첫 글자)
    let hintText = '';
    if (/^[\uAC00-\uD7A3]+$/.test(answer)) {
      hintText = getChoseong(answer);
    } else {
      hintText = answer[0];
    }

    // 힌트를 placeholder 속성에 넣음
    input.placeholder = hintText;
  });
}



// input 포커스 시 힌트 숨기기 이벤트
document.addEventListener('focusin', (e) => {
  if (e.target.classList.contains('answer-input')) {
    const hintSpan = e.target.parentElement.querySelector('.hint-text');
    if (hintSpan) {
      hintSpan.style.display = 'none';
    }
  }
});


// 정답 확인 기능

function checkAnswer() {
  let allCorrect = true;

  document.querySelectorAll('.answer-input').forEach(input => {
    const correct = input.dataset.answer;
    if (input.value.trim() !== correct) {
      allCorrect = false;
      input.style.border = '1px dashed #e35c6a';
    } else {
      input.style.border = '1px dashed #56b89e';
    }
  });

  if (allCorrect) {
    launchSmallFireworks(); // ✨ 폭죽 시작
    showTooltip('축하합니다. 정답입니다. 다음문제로 넘어갑니다.');
    setTimeout(() => {
      moveToNextCard();
    }, 3000);
  } else {
    showTooltip('틀렸습니다.');
  }
}

// 다음 문제로 이동
function moveToNextCard() {
  document.querySelectorAll('.answer-input').forEach(i => i.style.border = '');
  if (randomMode) {
    shufflePointer++;
    if (shufflePointer >= shuffledIndices.length) initShuffledIndices();
  } else {
    currentIndex++;
    if (currentIndex >= getFilteredLength()) currentIndex = 0;
  }
  renderCard();
}

// renderCard 확장 (게임모드 대응)
// renderCard 확장 (게임모드 대응)
const originalRenderCard = renderCard;
renderCard = function() {
  originalRenderCard();
  if (!currentCategory || !gameMode) {
    document.getElementById('game-controls').style.display = 'none';
    return;
  }
  const data = quizData[currentCategory];
  const realIndex = getRealIndex(currentIndex);
  const card = favoriteFilter ? data.filter((item, idx) => favorites.has(getKey(currentCategory, idx)))[currentIndex] : data[realIndex];

  const converted = convertAnswerToInputs(card.A);
  answerBox.classList.remove('hidden');
  answerBox.innerHTML = converted;
  document.getElementById('game-controls').style.display = 'block';
};

// 버튼 연결
hintBtn.onclick = applyHint;
checkBtn.onclick = checkAnswer;

//세팅메뉴
function toggleSettingsMenu() {
  const menu = document.getElementById('settings-menu');
  menu.classList.toggle('show');
}

function closeSettingsMenu() {
  const menu = document.getElementById('settings-menu');
  menu.classList.remove('show');
}

// 나가기 함수 예시 (필요시 내부 작업 후 메뉴 닫기)
function exitApp() {
  // 실제 나가기 동작 넣기 (예: 페이지 이동, 로그아웃 등)
  console.log("나가기 동작 실행");

  // 메뉴 닫기
  closeSettingsMenu();
}

// 외부 클릭 시 메뉴 닫기
document.addEventListener('click', function(event) {
  const menu = document.getElementById('settings-menu');
  const settingsIcon = document.querySelector('.settings-icon');
  if (!menu.contains(event.target) && !settingsIcon.contains(event.target)) {
    closeSettingsMenu();
  }
});

// 글자 크기 적용 로직 (16px ~ 30px, 1px 단위)
function applyFontSizeByIndex(index) {
  const fontSize = 16 + index;

  // .font-adjust 클래스가 붙은 요소에 글자 크기 적용
  document.querySelectorAll('.font-adjust').forEach(el => {
    el.style.fontSize = fontSize + 'px';
  });

  // 콤보박스(체크박스)의 크기도 폰트 비례로 조정
  const checkbox = document.getElementById('bookmark-checkbox');
  if (checkbox) {
    const scale = fontSize / 20; // 20px 기준으로 비율 계산
    checkbox.style.width = `${scale * 1.2}em`;
    checkbox.style.height = `${scale * 1.2}em`;
  }

  // 슬라이더 라벨에도 현재 크기 반영
  const label = document.querySelector('label[for="fontSlider"]');
  if (label) {
    label.textContent = `글자 크기 조절 (${fontSize}px)`;
  }
}

window.addEventListener('DOMContentLoaded', () => {
  const slider = document.getElementById('fontSlider');
  const defaultIndex = 4; // 16 + 4 = 20px
  const savedIndex = parseInt(localStorage.getItem('fontSizeIndex'), 10);
  const indexToApply = isNaN(savedIndex) ? defaultIndex : savedIndex;

  applyFontSizeByIndex(indexToApply);

  if (slider) {
    slider.min = 0;
    slider.max = 14; // 16px ~ 30px
    slider.step = 1;
    slider.value = indexToApply;

    slider.addEventListener('input', () => {
      const index = parseInt(slider.value, 10);
      applyFontSizeByIndex(index);
      localStorage.setItem('fontSizeIndex', index);
    });
  }

  // 초기화 함수
  window.resetFontSize = function () {
    applyFontSizeByIndex(defaultIndex);
    localStorage.setItem('fontSizeIndex', defaultIndex);
    if (slider) slider.value = defaultIndex;
  };
});

//카드편집

  // 저장키
  const STORAGE_KEY = 'memoryCards';

  // 팝업 열기
  function openCardEditorPopup() {
    document.getElementById('cardEditorPopup').style.display = 'block';
    loadCardTitles();
  }

  // 팝업 닫기
  function closeCardEditorPopup() {
    document.getElementById('cardEditorPopup').style.display = 'none';
  }

  // 카드 제목 리스트를 메뉴에서 불러오는 로직 참고해서 불러오기
  function loadCardTitles() {
  const selector = document.getElementById('cardSelector');
  selector.innerHTML = '';

  const titles = Object.keys(quizData); // quizData에서 카테고리 목록 추출

  if (titles.length === 0) {
    const opt = document.createElement('option');
    opt.value = '';
    opt.textContent = '저장된 암기카드가 없습니다.';
    opt.disabled = true;
    opt.selected = true;
    selector.appendChild(opt);
    return;
  }

  titles.forEach(title => {
    const opt = document.createElement('option');
    opt.value = title;
    opt.textContent = title;
    selector.appendChild(opt);
  });

  // 첫 번째 항목 선택 및 내용 표시
  selector.selectedIndex = 0;
  onCardTitleChange();
}

  // 선택된 카드 제목 변경시 내용 표시
function onCardTitleChange() {
  const title = document.getElementById('cardSelector').value;

  if (!title || !quizData[title]) {
    document.getElementById('cardTitleInput').value = '';
    document.getElementById('cardEditorTextarea').value = '';
    return;
  }

  const data = quizData[title]; // [{Q,A}, ...]

  document.getElementById('cardTitleInput').value = title;

  // 질문과 답변을 "질문 // 답변" 형식의 한 줄로 만들기
  const lines = data.map(item => `${item.Q} // ${item.A}`);

  // 각 줄을 개행(\n)으로 연결해서 텍스트 영역에 넣기
  document.getElementById('cardEditorTextarea').value = lines.join('\n');
}



  // 적용 버튼 클릭 (내용 저장)
function applyCardChanges() {
  const selector = document.getElementById('cardSelector');
  const titleInput = document.getElementById('cardTitleInput');
  const textarea = document.getElementById('cardEditorTextarea');

  const selectedCategory = selector.value;
  const newTitle = titleInput.value.trim();
  const rawText = textarea.value.trim();

  if (!selectedCategory || !rawText) {
    showTooltip('카드 내용을 입력해주세요.');
    return;
  }

  const newCards = rawText.split('\n').map(line => {
    const [q, a] = line.split('//').map(t => t.trim());
    return { Q: q || '', A: a || '' };
  }).filter(card => card.Q && card.A);

  // 제목 수정이 필요한 경우 기존 키 삭제 후 새로 추가
  let newCategoryKey = selectedCategory;
  if (newTitle && newTitle !== selectedCategory && newTitle !== '제목을 입력하세요') {
    quizData[newTitle] = newCards;
    delete quizData[selectedCategory];
    newCategoryKey = newTitle;
  } else {
    quizData[selectedCategory] = newCards;
  }
showTooltip('카드 내용이 적용되었습니다.');
  // 저장
  localStorage.setItem('allQuizData', JSON.stringify(quizData));
  categories = Object.keys(quizData);
  currentCategory = newCategoryKey;
  currentIndex = 0;

  // 메뉴 다시 생성 + 카드 렌더링
  createMenu();
  renderCard();
  closeCardEditorPopup();
  
}


//카드선텍 콤보박스 초기화

function populateCardSelector() {
  const selector = document.getElementById('cardSelector');
  selector.innerHTML = '';
  Object.keys(quizData).forEach(title => {
    const opt = document.createElement('option');
    opt.value = title;
    opt.textContent = title;
    selector.appendChild(opt);
  });
}


  // 새로운 암기카드 만들기 버튼 클릭
function prepareNewCard() {
  const newTitle = prompt("새 암기카드 제목을 입력하세요:");
  if (!newTitle) return;

  if (quizData[newTitle]) {
    alert("이미 존재하는 제목입니다.");
    return;
  }

  quizData[newTitle] = [];
  categories = Object.keys(quizData);

  // 새 제목으로 셀렉터 갱신
  const selector = document.getElementById('cardSelector');
  const option = document.createElement('option');
  option.value = newTitle;
  option.textContent = newTitle;
  selector.appendChild(option);
  selector.value = newTitle;

  // 텍스트 초기화
  document.getElementById('cardEditorTextarea').value = '';
  document.getElementById('cardTitleInput').value = newTitle;
 const textarea = document.getElementById('cardEditorTextarea');

  textarea.value =
`문제1 // 정답1
문제2 // 정답2
문제3 // 정답3
문제4 // 정답4
문제5 // 정답5`;

  // 즉시 저장
  localStorage.setItem('allQuizData', JSON.stringify(quizData));
}
</script>



</body>
</html>