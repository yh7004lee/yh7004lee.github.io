<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8">
  <title>말씀 순서 맞추기</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    * {
      box-sizing: border-box;
    }

    body {
      font-family: '맑은 고딕', sans-serif;
      background-color: #121212;
      color: #f0f0f0;
      margin: 0;
      padding: 20px;
      overflow-x: hidden;
    }

    h2 {
      font-size: 1.8rem;
      text-align: center;
      color: #ffffff;
    }

    p {
      text-align: center;
      margin-bottom: 20px;
      font-size: 1.1rem;
    }

    #verse-container {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      gap: 12px;
      padding: 20px;
      background-color: #1e1e1e;
      border: 2px dashed #888;
      border-radius: 12px;
      min-height: 100px;
    }

    .word {
      font-size: 1.2rem;
      padding: 12px 18px;
      background-color: #2c2c2c;
      border: 2px solid #444;
      border-radius: 10px;
      cursor: grab;
      user-select: none;
      color: #f0f0f0;
      touch-action: none;
    }

    .word.dragging {
      opacity: 0.5;
    }

#checkBtn {
  display: block;
  margin: 25px auto 10px auto;
  padding: 18px 0;     /* 위아래 패딩 크게 */
  font-size: 1.4rem;   /* 글자도 키움 */
  background-color: #444;
  color: #f0f0f0;
  border: none;
  border-radius: 12px; /* 모서리 약간 더 둥글게 */
  cursor: pointer;
  width: 100%;          /* 꽉 채우기 */

  box-sizing: border-box;
}

    #checkBtn:hover {
      background-color: #666;
    }

    #result {
      margin-top: 20px;
      font-size: 1.2rem;
      font-weight: bold;
      text-align: center;
    }

    canvas {
      position: fixed;
      top: 0;
      left: 0;
      pointer-events: none;
      z-index: 1000;
    }

    @media (max-width: 480px) {
      .word {
        font-size: 1.1rem;
        padding: 10px 14px;
      }

      h2 {
        font-size: 1.5rem;
      }

      p {
        font-size: 1rem;
      }
    }
  </style>
</head>
<body>

  <h2>📖 말씀 순서 맞추기</h2>
  <p>단어를 올바른 순서로 드래그하여 배열해 보세요</p>

  <div id="verse-container"></div>

  <button id="checkBtn">✅ 정답 확인</button>
  <div id="result"></div>

  <canvas id="fireworks"></canvas>

  <script>
    const correctOrder = [
      "하나님이", "세상을", "이처럼", "사랑하사", "독생자를", "주셨으니"
    ];

    const verseContainer = document.getElementById("verse-container");
    const checkBtn = document.getElementById("checkBtn");
    const result = document.getElementById("result");
    const canvas = document.getElementById("fireworks");
    const ctx = canvas.getContext("2d");

    let fireworks = [];
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    window.addEventListener('resize', () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    });

    function shuffle(array) {
      return array.sort(() => Math.random() - 0.5);
    }

    let shuffled = shuffle([...correctOrder]);

    function createWordDiv(word) {
      const div = document.createElement("div");
      div.className = "word";
      div.textContent = word;
      div.draggable = true;

      div.addEventListener("dragstart", () => div.classList.add("dragging"));
      div.addEventListener("dragend", () => div.classList.remove("dragging"));

      return div;
    }

    shuffled.forEach(word => {
      verseContainer.appendChild(createWordDiv(word));
    });

    verseContainer.addEventListener("dragover", (e) => {
      e.preventDefault();
      const dragging = document.querySelector(".dragging");
      const afterElement = getDragAfterElement(verseContainer, e.clientX);
      if (!afterElement) {
        verseContainer.appendChild(dragging);
      } else {
        verseContainer.insertBefore(dragging, afterElement);
      }
    });

    function getDragAfterElement(container, x) {
      const draggableElements = [...container.querySelectorAll(".word:not(.dragging)")];
      return draggableElements.reduce((closest, child) => {
        const box = child.getBoundingClientRect();
        const offset = x - box.left - box.width / 2;
        if (offset < 0 && offset > closest.offset) {
          return { offset, element: child };
        } else {
          return closest;
        }
      }, { offset: Number.NEGATIVE_INFINITY }).element;
    }

    checkBtn.addEventListener("click", () => {
      const current = [...verseContainer.querySelectorAll(".word")].map(el => el.textContent);
      const isCorrect = JSON.stringify(current) === JSON.stringify(correctOrder);
      result.textContent = isCorrect
        ? "🎉 정답입니다! 축하합니다!"
        : "❌ 아직 맞지 않았어요. 다시 시도해보세요!";
      result.style.color = isCorrect ? "lightgreen" : "orange";

      if (isCorrect) {
        launchFireworks();
      }
    });

    // 🔥 폭죽 관련 코드
    function launchFireworks() {
      fireworks = [];
      for (let i = 0; i < 5; i++) {
        createFirework(canvas.width / 2, canvas.height / 2);
      }
    }

function createFirework(x, y) {
  for (let i = 0; i < 120; i++) { // 파편 수 증가
    const angle = (Math.PI * 2 * i) / 120;
    const speed = Math.random() * 8 + 6; // 속도 증가
    fireworks.push({
      x: x,
      y: y,
      dx: Math.cos(angle) * speed,
      dy: Math.sin(angle) * speed,
      alpha: 1,
      color: `hsl(${Math.random() * 360}, 100%, 60%)`
    });
  }
}

function updateFireworks() {
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  fireworks.forEach((f, i) => {
    f.x += f.dx;
    f.y += f.dy;
    f.alpha -= 0.008; // 더 천천히 사라지게
    if (f.alpha <= 0) fireworks.splice(i, 1);
  });

  fireworks.forEach(f => {
    ctx.beginPath();
    ctx.arc(f.x, f.y, 5, 0, 2 * Math.PI); // 크기 증가
    ctx.fillStyle = f.color;
    ctx.globalAlpha = f.alpha;
    ctx.fill();
  });

  ctx.globalAlpha = 1;
}
    function animate() {
      updateFireworks();
      requestAnimationFrame(animate);
    }

    animate();
  </script>

</body>
</html>
