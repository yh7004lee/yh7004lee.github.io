<!DOCTYPE html>
<html lang="ko">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover">
<title>성경 암송 카드</title>
<style>

* {
  box-sizing: border-box;
}

html, body {
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
}
body {
  background-color: #121212;
  color: #fff;
  display: flex;
  flex-direction: column;
  margin: 0;
  padding: 0;
  padding-top: env(safe-area-inset-top);
  padding-bottom: env(safe-area-inset-bottom);
  padding-left: env(safe-area-inset-left);
  padding-right: env(safe-area-inset-right);
}


#player-bar {
  position: fixed;
  bottom: 0;
  left: 0;
  width: 100%;
  background: #1e1e1e;
  padding: 10px 10px calc(10px + env(safe-area-inset-bottom)); /* 하단 안전 여백 추가 */
  box-shadow: 0 -2px 10px rgba(0,0,0,0.5);
  box-sizing: border-box;
  z-index: 9999;
}

    #verse-title {
      font-size: 20px;
      font-weight: bold;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      color: #ffffff;
    }

    #progress-container {
      height: 4px;
      background: #333;
      border-radius: 2px;
      margin: 4px 0 12px;
      position: relative;
    }

    #progress-bar {
      height: 100%;
      background: #03dac6;
      border-radius: 2px;
      width: 0%;
      position: absolute;
    }

    #controls {
      display: flex;
      gap: 15px;
      flex-wrap: wrap;
    }

    .btn {
      background: #03dac6;
      color: #000;
      border: none;
      padding: 6px 16px;
      border-radius: 4px;
      font-size: 16px;
      cursor: pointer;
    }

    .btn:hover {
      background: #00bfa5;
    }

#playlist-overlay {
  display: none;
  flex-direction: column;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(18,18,18,0.98);
  z-index: 10;
  overflow: hidden;
}

    #playlist-header {
      position: sticky;
      top: 0;
      background: #1e1e1e;
      padding: 10px;
      box-shadow: 0 2px 6px rgba(0,0,0,0.3);
      z-index: 1;
    }

    #playlist-controls {
      display: flex;
      gap: 15px;
      margin-bottom: 6px;
    }

    .btn-small {
      background: #03dac6;
      color: #000;
      border: none;
      padding: 6px 16px;
      font-size: 16px;
      border-radius: 4px;
      cursor: pointer;
    }

    .btn-small:hover {
      background: #00bfa5;
    }




#playlist-checkboxes {
  overflow-y: auto;
  padding: 10px 0px;
  position: relative;
  z-index: 10;
  box-sizing: border-box;
   margin: 10px 0 0 0;

}


.playlist-item {
  display: flex;
   vertical-align: bottom;
   font-size: 1.1rem;
   line-height: 1.2; /* <= 추가 */ 
  gap: 1px;

  min-height: 44px; /* 모바일 기본 터치 영역 기준 */
 
}
.playlist-item input[type="checkbox"] {
  flex-shrink: 0;        /* 체크박스 크기 고정 */
  width: 18px;           /* 체크박스 크기 조정 */
  height: 18px;
}


/* 상단 버튼 스타일 */
.top-buttons {
  display: flex;
  justify-content: space-between; /* 버튼을 좌우로 최대한 벌림 */
   align-items: center; /* <-- stretch에서 center로 변경 */
  background-color: #1e1e1e;
  padding: 0;
  z-index: 2;
}




.top-buttons button {
  flex: 1; /* 버튼 너비를 균등하게 만듦 */
  text-align: center; /* 버튼 안의 텍스트 중앙 정렬 */
  padding: 0 20px;
  height: 40px;
  line-height: 40px;
  vertical-align: middle;
  background: none;
  border: none;
  color: #fff;
  font-size: 1.1rem;
  cursor: pointer;
  border-right: 1px solid #333333;
  border-radius: 0;
  transition: background-color 1s ease, color 0.3s ease; /* ✅ transition 수정 */
}

/* 클릭(또는 터치) 시 효과 */
.top-buttons button:active {
  background-color: rgba(197, 79, 109, 0.8); /* ✅ 약간의 투명도 (0.7) 추가 */
  transition: background-color 1s ease; /* ✅ transition 추가 */
}


/* 호버 효과는 그대로 유지 */
.top-buttons button:hover,
.top-buttons button:focus {
  background-color: rgba(197, 79, 109, 0.8);✅ 약간의 투명도 (0.7) 추가 */
}



/* 하단 버튼 스타일 */
.bottom-buttons {
  display: flex;
  justify-content: space-around;
  background-color: #1e1e1e;
  padding: 10px 0;
  z-index: 2;
}

.bottom-buttons button {
  background: none;
  border: none;
  color: #fff;
  font-size: 1.1rem;
  cursor: pointer;
  transition: background-color 0.3s ease, color 0.3s ease;
  border-radius: 8px;
}

.bottom-buttons button:hover,
.bottom-buttons button:focus {
  background-color: #2a2a2a;
}

.bottom-buttons button:active {
  background-color: #333333;
}

.verse-container {
  display: flex;
  flex-direction: column;
  align-items: stretch;
  justify-content: flex-start;
  padding: 14px 0 40px 0;
  gap: 14px;
  overflow-y: auto;
  overflow-x: hidden;
  touch-action: pan-y;
  margin: 50 0 0 0;  /* 🔧 상단 마진 50px */
  box-sizing: border-box;
}




.verse-box, 
.favorite-box {
 /*height: auto; */
  width: 100%;
  margin: 0;
  padding: 10px;
  box-sizing: border-box;

}


.verse-box {
  background: #1e1e1e;
  /*border-radius: 15px;*/
  text-align: left;
  cursor: pointer;
}


.favorite-box {
  display: flex;
  align-items: center;
  gap: 10px; /* 간격 조절 */
  background: #1e1e1e;
   /*border-radius: 15px;*/
  cursor: pointer;
}




.verse-title {
  font-size: 1.6rem;
  /*font-weight: bold;*/
  color: #FFF; /* 주황빛 노랑 */
  margin: 0;
}

.verse-text {
  font-size: 1.6rem;
  line-height: 2.4rem;
   /*font-weight: bold;*/
  color: #FFF; /* 연녹색 */
  margin: 0;
}



.favorite-label {
  font-size: 1.6rem;
  color: #fff; /* 연하늘색 */
   /*font-weight: bold;*/
}




/* 체크박스 크기 조정 */
#favoriteCheckbox {
  width: 17px;
  height: 17px;
  transform: scale(1.5);
}




/* 말씀 편집 모드 스타일 */
.edit-container {
  position: fixed;
  top: 0; /* 수정: 기존 60px -> 0 */
  bottom: 0;
  left: 0;
  right: 0;
  background-color: #121212;
  padding: 10px 15px 20px 15px;
  display: flex;
  flex-direction: column;
  z-index: 5;
  overflow: auto;
}

.edit-title {
  font-size: 1.4rem;
  color: #fff;
 font-weight: normal; /* 굵게 보이지 않도록 설정 */
  margin: 0;
  padding-top: 4px;
  padding-left: 10px;
  padding-bottom: 6px;
}

#editTextarea {
  flex: 1;
  width: 100%;
  resize: none;
  font-size: 1rem;
  padding: 10px;
  background-color: #1e1e1e;
  color: #fff;
  border: 1px solid #444;
  border-radius: 10px;
  box-sizing: border-box;
}

.edit-buttons {
  display: flex;
  justify-content: space-around;
  margin-top: 15px;
}

.edit-buttons button {
  flex: 1;
  margin: 0 5px;
  padding: 10px;
  font-size: 1.1rem;
  border: none;
  border-radius: 8px;
  background-color: #2a2a2a;
  color: #fff;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.edit-buttons button:hover {
  background-color: #333333;
}

@media (max-width: 768px) {
  #editTextarea {
    font-size: 1rem;
  }

  .edit-title {
    font-size: 1.2rem;
  }
}

.verse-box.animate-left,
.favorite-box.animate-left {
  animation: slideLeft 0.7s ease;
}

.verse-box.animate-right,
.favorite-box.animate-right {
  animation: slideRight 0.7s ease;
}

@keyframes slideLeft {
  0% {
    opacity: 0;
    transform: translateX(50px);
  }
  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes slideRight {
  0% {
    opacity: 0;
    transform: translateX(-50px);
  }
  100% {
    opacity: 1;
    transform: translateX(0);
  }
}


#settingsMenu {
  display: none;
  position: absolute;
  top: 48px;
  right: 10px;
  width: 90vw;
  max-width: 300px;
  background-color: #1e1e1e;
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 14px;
  padding: 5px 12px;
box-shadow:
  /* 네온 광채 - 더 밝고 선명하게 */
  0 0 4px rgba(0, 255, 255, 0.8),   /* 형광 청록빛 */
  0 0 8px rgba(0, 255, 255, 0.6),
  0 0 16px rgba(0, 255, 255, 0.5),
  0 0 24px rgba(0, 255, 255, 0.3),

  /* 아래로 드리운 어두운 그림자 */
  0 10px 20px rgba(0, 0, 0, 0.5);
  
z-index: 10000;
  animation: fadeInMenu 0.3s ease-out;
}

@keyframes fadeInMenu {
  from {
    opacity: 0;
    transform: translateY(-10px) scale(0.98);
  }
  to {
    opacity: 1;
    transform: translateY(0) scale(1);
  }
}

#settingsMenu h3 {
  font-size: 1.2rem;
  color: #ffffff;
  margin-top: 0;
  margin-bottom: 10px;
  padding-bottom: 6px;
  border-bottom: 1px solid #333;
}

#settingsMenu ul {
  list-style: none;
  padding: 0;
  margin: 0;
}

#settingsMenu ul li {
  padding: 10px 14px;
  margin-bottom: 6px;
  background-color: #262626;
  border-radius: 10px;
  color: #eee;
  font-size: 1rem;
  cursor: pointer;
  transition: background-color 0.25s ease;
}

#settingsMenu ul li:hover {
  background-color: #333;
  color: #03dac6;
}

#settingsMenu ul li:active {
  background-color: #444;
}



/* 메뉴 항목 */
.settings-item {
  padding: 10px 10px;
  font-size: 1.1rem;
  color: #fff;
  background-color: transparent;
  user-select: none;
  cursor: pointer;
  transition: background-color 0.3s ease;
  border-bottom: 1px solid rgba(255, 255, 255, 0.2);
}

/* 마지막 항목은 보더 제거 */
.settings-item:last-child {
  border-bottom: none;
}

/* 호버 효과 */
.settings-item:hover {
  background-color: #c54f6d;
}

/* 슬라이더 */
.settings-item input[type="range"] {
  width: 100%;
  margin-top: 6px;
  cursor: pointer;
}
</style>
</head>
<body>

<div class="top-buttons">
  <button id="toggleButton" onclick="toggleVerse()">숨겨</button>
  <button id="modeToggleButton" onclick="toggleMode()">랜덤</button>
  <button id="favoriteToggleButton" onclick="toggleFavorites()">즐찾</button>
<button id="settingsToggleButton" onclick="toggleSettingsMenu()">설정</button>
</div>


<div id="settingsMenu">
  <div class="inner-container">
    <div class="settings-item" onclick="handleEditClick()">💗 말씀 편집하기</div>
    <div class="settings-item" onclick="showPlayer()">💗 전체 말씀듣기</div>
<div class="settings-item" onclick="favoritePlayer()">💗 즐겨찾기 말씀듣기</div>
    <div class="settings-item">
      💗 말씀구절 글자크기
      <input id="titleFontSlider" type="range" min="1" max="6" value="1">
    </div>
    <div class="settings-item">
      💗 말씀내용 글자크기
      <input id="textFontSlider" type="range" min="1" max="6" value="1">
    </div>
    <div class="settings-item" onclick="resetFontSizes()">💗 글자크기 초기화</div>
    <div class="settings-item" onclick="openHelpPopup()">💗 도움말</div>
    <div class="settings-item" onclick="hideSettingsMenu()">💗 나가기</div>
  </div>
</div>



<div class="verse-container" id="verseContainer">
  <div class="verse-box">
    <div class="verse-title" id="verseTitle"></div>
  </div>
  <div class="verse-box">
    <div class="verse-text" id="verseText"></div>
  </div>
  <div class="favorite-box" onclick="toggleFavoriteCheckbox()">
    <span class="favorite-label">즐겨찾기 추가  </span>
    <input type="checkbox" id="favoriteCheckbox" onclick="event.stopPropagation(); updateFavorite();">
  </div>
</div>


 <div id="player-bar" style="display: none;">
    <div id="verse-title">1. 고린도후서 5장 17절</div>
    <div id="progress-container">
      <div id="progress-bar"></div>
    </div>
    <div id="controls">
      <button class="btn" id="togglePlayBtn"  onclick="playAudio()">재생</button>
      <button class="btn" onclick="pauseAudio()">정지</button>
      <button class="btn" onclick="togglePlaylist()">목록</button>
      <button class="btn" onclick="stopAll()">닫기</button>
    </div>
  </div>

  <div id="playlist-overlay">
    <div id="playlist-header">
      <div id="playlist-controls">
        <button class="btn-small" onclick="toggleSelectAll()">선택</button>
<button class="btn-small" onclick="clearAllSelection()">해제</button>
        <button class="btn-small" onclick="applySelected()">적용</button>
        <button class="btn-small" onclick="hidePlaylist()">숨겨</button>
      </div>
      <div id="playlist-checkboxes"></div>
    </div>
  </div>

  <audio id="audio" preload="metadata"></audio>




<div id="editContainer" class="edit-container" style="display: none;">
  <h2 class="edit-title">편집 형식 : 말씀구절 | 말씀내용</h2>
  <textarea id="editTextarea"></textarea>
  <div class="edit-buttons">
    <button onclick="saveEditedVerses()">확인</button>
    <button onclick="cancelEdit()">취소</button>
    <button onclick="resetToOriginal()">초기화</button>
  </div>
</div>


<script>

let settingsVisible = false;

function toggleSettingsMenu() {
  const menu = document.getElementById("settingsMenu");
  settingsVisible = !settingsVisible;
  menu.style.display = settingsVisible ? "block" : "none";
}

document.addEventListener("click", function (event) {
  const menu = document.getElementById("settingsMenu");
  const button = document.getElementById("settingsToggleButton");
  if (!menu.contains(event.target) && event.target !== button) {
    menu.style.display = "none";
    settingsVisible = false;
  }
});

function handleEditClick() {
  toggleEditMode();
  hideSettingsMenu();
}

function hideSettingsMenu() {
  document.getElementById("settingsMenu").style.display = "none";
  settingsVisible = false;
}

// 글자 크기 조절 슬라이더와 저장 로직
const titleFontSlider = document.getElementById("titleFontSlider");
const textFontSlider = document.getElementById("textFontSlider");
const verseTitle = document.getElementById("verseTitle");
const verseText = document.getElementById("verseText");

function applyFontSize() {
  const titleScale = parseInt(titleFontSlider.value);
  const textScale = parseInt(textFontSlider.value);

  const titleSize = 1.6 + (titleScale - 1) * 0.2;
  const textSize = 1.6 + (textScale - 1) * 0.2;

  verseTitle.style.fontSize = `${titleSize}rem`;
  verseTitle.style.lineHeight = `${titleSize * 1.4}rem`; // 줄간격 설정
  verseText.style.fontSize = `${textSize}rem`;
  verseText.style.lineHeight = `${textSize * 1.5}rem`; // 줄간격 설정

  localStorage.setItem("verseTitleSize", titleScale);
  localStorage.setItem("verseTextSize", textScale);
}

titleFontSlider.addEventListener("input", applyFontSize);
textFontSlider.addEventListener("input", applyFontSize);

function resetFontSizes() {
  titleFontSlider.value = 1;
  textFontSlider.value = 1;
  applyFontSize();
}

window.addEventListener("load", () => {
  const savedTitleSize = localStorage.getItem("verseTitleSize") || 1;
  const savedTextSize = localStorage.getItem("verseTextSize") || 1;

  titleFontSlider.value = savedTitleSize;
  textFontSlider.value = savedTextSize;

  applyFontSize();
});

document.getElementById("titleFontSlider").addEventListener("input", function () {
  const scale = parseInt(this.value);
  const verseTitle = document.getElementById("verseTitle");
  const fontSize = 1.4 + 0.2 * scale;
  const lineHeight = fontSize * 1.4; // 줄간격 비율
  verseTitle.style.fontSize = fontSize + "rem";
  verseTitle.style.lineHeight = lineHeight + "rem";
});

document.getElementById("textFontSlider").addEventListener("input", function () {
  const scale = parseInt(this.value);
  const verseText = document.getElementById("verseText");
  const fontSize = 1.4 + 0.2 * scale;
  const lineHeight = fontSize * 1.5; // 줄간격 비율
  verseText.style.fontSize = fontSize + "rem";
  verseText.style.lineHeight = lineHeight + "rem";
});


// localStorage key
const STORAGE_KEY_VERSES = 'savedVerses';
const STORAGE_KEY_FAVORITES = 'favorites';

// 로컬스토리지에서 저장된 말씀 불러오기
function loadSavedVerses() {
  const saved = localStorage.getItem(STORAGE_KEY_VERSES);
  if (!saved) return null;

  try {
    const parsed = JSON.parse(saved);
    return parsed.map((v, i) => ({ ...v, id: i }));
  } catch {
    return null;
  }
}

function saveVersesToStorage(verses) {
  localStorage.setItem(STORAGE_KEY_VERSES, JSON.stringify(verses));
}

// 기본 말씀 구절 문자열
const originalVersesStr = `
1. 고린도후서 5장 17절| 그런즉 누구든지 그리스도 안에 있으면 새로운 피조물이라 이전 것은 지나갔으니 보라 새 것이 되었도다 
2. 갈라디아서 2장 20절| 내가 그리스도와 함께 십자가에 못 박혔나니 그런즉 이제는 내가 사는 것이 아니요 오직 내 안에 그리스도께서 사시는 것이라 이제 내가 육체 가운데 사는 것은 나를 사랑하사 나를 위하여 자기 자신을 버리신 하나님의 아들을 믿는 믿음 안에서 사는 것이라 
3. 로마서 12장 1절| 그러므로 형제들아 내가 하나님의 모든 자비하심으로 너희를 권하노니 너희 몸을 하나님이 기뻐하시는 거룩한 산 제물로 드리라 이는 너희가 드릴 영적 예배니라 
4. 요한복음 14장 21절| 나의 계명을 지키는 자라야 나를 사랑하는 자니 나를 사랑하는 자는 내 아버지께 사랑을 받을 것이요 나도 그를 사랑하여 그에게 나를 나타내리라 
5. 디모데후서 3장 16절| 모든 성경은 하나님의 감동으로 된 것으로 교훈과 책망과 바르게 함과 의로 교육하기에 유익하니 
6. 여호수아 1장 8절| 이 율법책을 네 입에서 떠나지 말게 하며 주야로 그것을 묵상하여 그 안에 기록된 대로 다 지켜 행하라 그리하면 네 길이 평탄하게 될 것이며 네가 형통하리라 
7. 요한복음 15장 7절| 너희가 내 안에 거하고 내 말이 너희 안에 거하면 무엇이든지 원하는 대로 구하라 그리하면 이루리라 
8. 빌립보서 4장 6-7절| 아무 것도 염려하지 말고 다만 모든 일에 기도와 간구로 너희 구할 것을 감사함으로 하나님께 아뢰라 그리하면 모든 지각에 뛰어난 하나님의 평강이 그리스도 예수 안에서 너희 마음과 생각을 지키시리라 
9. 마태복음 18장 20절| 두세 사람이 내 이름으로 모인 곳에는 나도 그들 중에 있느니라 
10. 히브리서 10장 24-25절| 서로 돌아보아 사랑과 선행을 격려하며 모이기를 폐하는 어떤 사람들의 습관과 같이 하지 말고 오직 권하여 그 날이 가까움을 볼수록 더욱 그리하자 
11. 마태복음 4장 19절| 말씀하시되 나를 따라오라 내가 너희를 사람을 낚는 어부가 되게 하리라 하시니 
12. 로마서 1장 16절| 내가 복음을 부끄러워하지 아니하노니 이 복음은 모든 믿는 자에게 구원을 주시는 하나님의 능력이 됨이라 먼저는 유대인에게요 그리고 헬라인에게로다 
13. 로마서 3장 23절| 모든 사람이 죄를 범하였으매 하나님의 영광에 이르지 못하더니 
14. 이사야 53장 6절| 우리는 다 양 같아서 그릇 행하여 각기 제 길로 갔거늘 여호와께서는 우리 모두의 죄악을 그에게 담당시키셨도다 
15. 로마서 6장 23절| 죄의 삯은 사망이요 하나님의 은사는 그리스도 예수 우리 주 안에 있는 영생이니라 
16. 히브리서 9장 27절| 한번 죽는 것은 사람에게 정해진 것이요 그 후에는 심판이 있으리니 
17 로마서 5장 8절| 우리가 아직 죄인 되었을 때에 그리스도께서 우리를 위하여 죽으심으로 하나님께서 우리에 대한 자기의 사랑을 확증하셨느니라 
18. 베드로전서 3장 18절| 그리스도께서도 단번에 죄를 위하여 죽으사 의인으로서 불의한 자를 대신하셨으니 이는 우리를 하나님 앞으로 인도하려 하심이라 육체로는 죽임을 당하시고 영으로는 살리심을 받으셨으니 
19. 에베소서 2장 8-9절| 너희는 그 은혜에 의하여 믿음으로 말미암아 구원을 받았으니 이것은 너희에게서 난 것이 아니요 하나님의 선물이라 행위에서 난 것이 아니니 이는 누구든지 자랑하지 못하게 함이라 
20. 디도서 3장 5절| 우리를 구원하시되 우리가 행한 바 의로운 행위로 말미암지 아니하고 오직 그의 긍휼하심을 따라 중생의 씻음과 성령의 새롭게 하심으로 하셨나니 
21. 요한복음 1장 12절| 영접하는 자 곧 그 이름을 믿는 자들에게는 하나님의 자녀가 되는 권세를 주셨으니 
22. 요한계시록 3장 20절| 볼지어다 내가 문 밖에 서서 두드리노니 누구든지 내 음성을 듣고 문을 열면 내가 그에게로 들어가 그와 더불어 먹고 그는 나와 더불어 먹으리라 
23. 요한일서 5장 13절| 내가 하나님의 아들의 이름을 믿는 너희에게 이것을 쓰는 것은 너희로 하여금 너희에게 영생이 있음을 알게 하려 함이라 
24. 요한복음 5장 24절| 내가 진실로 진실로 너희에게 이르노니 내 말을 듣고 또 나 보내신 이를 믿는 자는 영생을 얻었고 심판에 이르지 아니하나니 사망에서 생명으로 옮겼느니라 
25. 고린도전서 3장 16절| 너희는 너희가 하나님의 성전인 것과 하나님의 성령이 너희 안에 계시는 것을 알지 못하느냐 
26. 고린도전서 2장 12절| 우리가 세상의 영을 받지 아니하고 오직 하나님으로부터 온 영을 받았으니 이는 우리로 하여금 하나님께서 우리에게 은혜로 주신 것들을 알게 하려 하심이라 
27. 이사야 41장 10절| 두려워하지 말라 내가 너와 함께 함이라 놀라지 말라 나는 네 하나님이 됨이라 내가 너를 굳세게 하리라 참으로 너를 도와 주리라 참으로 나의 의로운 오른손으로 너를 붙들리라 
28. 빌립보서 4장 13절| 내게 능력 주시는 자 안에서 내가 모든 것을 할 수 있느니라 
29. 예레미야애가 3장 22-23절| 여호와의 인자와 긍휼이 무궁하시므로 우리가 진멸되지 아니함이니이다 이것들이 아침마다 새로우니 주의 성실하심이 크시도소이다 
30. 민수기 23장 19절| 하나님은 사람이 아니시니 거짓말을 하지 않으시고 인생이 아니시니 후회가 없으시도다 어찌 그 말씀하신 바를 행하지 않으시며 하신 말씀을 실행하지 않으시랴 
31. 이사야 26장 3절| 주께서 심지가 견고한 자를 평강하고 평강하도록 지키시리니 이는 그가 주를 신뢰함이니이다 
32. 베드로전서 5장 7절| 너희 염려를 다 주께 맡기라 이는 그가 너희를 돌보심이라 
33. 로마서 8장 32절| 자기 아들을 아끼지 아니하시고 우리 모든 사람을 위하여 내주신 이가 어찌 그 아들과 함께 모든 것을 우리에게 주시지 아니하겠느냐 
34. 빌립보서 4장 19절| 나의 하나님이 그리스도 예수 안에서 영광 가운데 그 풍성한 대로 너희 모든 쓸 것을 채우시리라 
35. 히브리서 2장 18절| 그가 시험을 받아 고난을 당하셨은즉 시험 받는 자들을 능히 도우실 수 있느니라 
36. 시편 119편 9-11절| 청년이 무엇으로 그의 행실을 깨끗하게 하리이까 주의 말씀만 지킬 따름이니이다 내가 주께 범죄하지 아니하려 하여 주의 말씀을 내 마음에 두었나이다 
37. 마태복음 6장 33절| 그런즉 너희는 먼저 그의 나라와 그의 의를 구하라 그리하면 이 모든 것을 너희에게 더하시리라 
38. 누가복음 9장 23절| 또 무리에게 이르시되 아무든지 나를 따라오려거든 자기를 부인하고 날마다 제 십자가를 지고 나를 따를 것이니라 
39. 요한일서 2장 15-16절| 이 세상이나 세상에 있는 것들을 사랑하지 말라 누구든지 세상을 사랑하면 아버지의 사랑이 그 안에 있지 아니하니 이는 세상에 있는 모든 것이 육신의 정욕과 안목의 정욕과 이생의 자랑이니 다 아버지께로부터 온 것이 아니요 세상으로부터 온 것이라 
40. 로마서 12장 2절| 너희는 이 세대를 본받지 말고 오직 마음을 새롭게 함으로 변화를 받아 하나님의 선하시고 기뻐하시고 온전하신 뜻이 무엇인지 분별하도록 하라 
41. 고린도전서 15장 58절| 그러므로 내 사랑하는 형제들아 견실하며 흔들리지 말고 항상 주의 일에 더욱 힘쓰는 자들이 되라 이는 너희 수고가 주 안에서 헛되지 않은 줄 앎이라 
42. 히브리서 12장 3절| 너희가 피곤하여 낙심하지 않기 위하여 죄인들이 이같이 자기에게 거역한 일을 참으신 이를 생각하라 
43. 마가복음 10장 45절| 인자가 온 것은 섬김을 받으려 함이 아니라 도리어 섬기려 하고 자기 목숨을 많은 사람의 대속물로 주려 함이니라 
44. 고린도후서 4장 5절| 우리는 우리를 전파하는 것이 아니라 오직 그리스도 예수의 주 되신 것과 또 예수를 위하여 우리가 너희의 종 된 것을 전파함이라 
45. 잠언 3장 9-10절| 네 재물과 네 소산물의 처음 익은 열매로 여호와를 공경하라 그리하면 네 창고가 가득히 차고 네 포도즙 틀에 새 포도즙이 넘치리라 
46. 고린도후서 9장 6-7절| 이것이 곧 적게 심는 자는 적게 거두고 많이 심는 자는 많이 거둔다 하는 말이로다 각각 그 마음에 정한 대로 할 것이요 인색함으로나 억지로 하지 말지니 하나님은 즐겨 내는 자를 사랑하시느니라 
47. 사도행전 1장 8절| 오직 성령이 너희에게 임하시면 너희가 권능을 받고 예루살렘과 온 유대와 사마리아와 땅 끝까지 이르러 내 증인이 되리라 하시니라 
48. 마태복음 28장 19-20절| 그러므로 너희는 가서 모든 민족을 제자로 삼아 아버지와 아들과 성령의 이름으로 세례를 베풀고 내가 너희에게 분부한 모든 것을 가르쳐 지키게 하라 볼지어다 내가 세상 끝날까지 너희와 항상 함께 있으리라 하시니라 
49. 요한복음 13장 34-35절| 새 계명을 너희에게 주노니 서로 사랑하라 내가 너희를 사랑한 것 같이 너희도 서로 사랑하라 너희가 서로 사랑하면 이로써 모든 사람이 너희가 내 제자인 줄 알리라 
50. 요한일서 3장 18절| 자녀들아 우리가 말과 혀로만 사랑하지 말고 행함과 진실함으로 하자 
51. 빌립보서 2장 3-4절| 아무 일에든지 다툼이나 허영으로 하지 말고 오직 겸손한 마음으로 각각 자기보다 남을 낫게 여기고 각각 자기 일을 돌볼뿐더러 또한 각각 다른 사람들의 일을 돌보아 나의 기쁨을 충만하게 하라 
52. 베드로전서 5장 5-6절| 젊은 자들아 이와 같이 장로들에게 순종하고 다 서로 겸손으로 허리를 동이라 하나님은 교만한 자를 대적하시되 겸손한 자들에게는 은혜를 주시느니라 그러므로 하나님의 능하신 손 아래에서 겸손하라 때가 되면 너희를 높이시리라 
53. 에베소서 5장 3절| 음행과 온갖 더러운 것과 탐욕은 너희 중에서 그 이름조차도 부르지 말라 이는 성도에게 마땅한 바니라 
54. 베드로전서 2장 11절| 사랑하는 자들아 거류민과 나그네 같은 너희를 권하노니 영혼을 거슬러 싸우는 육체의 정욕을 제어하라 
55. 레위기 19장 11절| 너희는 도둑질하지 말며 속이지 말며 서로 거짓말하지 말며 
56. 사도행전 24장 16절| 이것으로 말미암아 나도 하나님과 사람에 대하여 항상 양심에 거리낌이 없기를 힘쓰나이다 
57. 히브리서 11장 6절| 믿음이 없이는 하나님을 기쁘시게 하지 못하나니 하나님께 나아가는 자는 반드시 그가 계신 것과 또한 그가 자기를 찾는 자들에게 상 주시는 이심을 믿어야 할지니라 
58. 로마서 4장 20-21절| 믿음이 없어 하나님의 약속을 의심하지 않고 믿음으로 견고하여져서 하나님께 영광을 돌리며 약속하신 그것을 또한 능히 이루실 줄을 확신하였으니 
59. 갈라디아서 6장 9-10절| 우리가 선을 행하되 낙심하지 말지니 포기하지 아니하면 때가 이르매 거두리라 그러므로 우리는 기회 있는 대로 모든 이에게 착한 일을 하되 더욱 믿음의 가정들에게 할지니라 
60. 마태복음 5장 16절| 이같이 너희 빛이 사람 앞에 비치게 하여 그들로 너희 착한 행실을 보고 하늘에 계신 너희 아버지께 영광을 돌리게 하라 
`;

function parseVerses(str) {
  return str.trim().split('\n').map((line, i) => {
    const [title, text] = line.split('|').map(s => s.trim());
    return { id: i, title, text, favorite: false };
  });
}

// 초기화
let originalVerses = loadSavedVerses() || parseVerses(originalVersesStr);
let favoriteIds = JSON.parse(localStorage.getItem(STORAGE_KEY_FAVORITES) || '[]');

// favorite 상태 복원
originalVerses = originalVerses.map((v, i) => ({
  ...v,
  id: i,
  favorite: favoriteIds.includes(i)
}));

let verses = [...originalVerses];
let current = 0;
let isHidden = false;
let isRandomMode = false;
let showOnlyFavorites = false;




function renderVerse() {

  const verse = verses[current];
  if (!verse) return;
  document.getElementById('verseTitle').textContent = verse.title;
  document.getElementById('verseText').textContent = verse.text;
  document.getElementById('favoriteCheckbox').checked = verse.favorite;
}

function applyAnimation(direction = 'left') {
  const verseBoxes = document.querySelectorAll('.verse-box, .favorite-box');
  verseBoxes.forEach((box) => {
    box.classList.remove('animate-left', 'animate-right'); // 초기화
    void box.offsetWidth; // 리플로우 강제 → 연속 클릭 시 애니메이션 재실행됨
    box.classList.add(direction === 'left' ? 'animate-left' : 'animate-right');
  });
}

function prevVerse() {
applyAnimation('right');
  current = (current - 1 + verses.length) % verses.length;
  renderVerse();
}

function nextVerse() {
    applyAnimation('left');
  current = (current + 1) % verses.length;
  renderVerse();
}

function toggleVerse() {
  isHidden = !isHidden;
  document.getElementById("toggleButton").innerText = isHidden ? "보여" : "숨겨";

  const textEl = document.getElementById("verseText");

  if (isHidden) {
    textEl.style.color = "#1e1e1e"; // 배경색과 같게 설정하여 안 보이게
  } else {
    textEl.style.color = "#FFF"; // 본문 글자 원래 색상
  }

  renderVerse();
}

function toggleMode() {
  const modeButton = document.getElementById('modeToggleButton');

  if (!isRandomMode) {
    let shuffled;
    let attempts = 0;
    do {
      shuffled = [...verses];
      for (let i = shuffled.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
      }
      attempts++;
    } while (arraysAreEqual(shuffled, verses) && attempts < 10);

    verses = shuffled;
    isRandomMode = true;
    modeButton.textContent = "순차";
  } else {
    verses = showOnlyFavorites ? originalVerses.filter(v => v.favorite) : [...originalVerses];
    isRandomMode = false;
    modeButton.textContent = "랜덤";
  }

  current = 0;
  renderVerse();
}

// 🔧 배열 비교 함수 (같은 순서인지 확인)
function arraysAreEqual(arr1, arr2) {
  if (arr1.length !== arr2.length) return false;
  for (let i = 0; i < arr1.length; i++) {
    if (arr1[i] !== arr2[i]) return false;
  }
  return true;
}


function updateFavorite() {
  const verse = verses[current];
  verse.favorite = document.getElementById('favoriteCheckbox').checked;

  const original = originalVerses.find(v => v.id === verse.id);
  if (original) original.favorite = verse.favorite;

  const newFavorites = originalVerses.filter(v => v.favorite).map(v => v.id);
  localStorage.setItem(STORAGE_KEY_FAVORITES, JSON.stringify(newFavorites));
}

function toggleFavoriteCheckbox() {
  const checkbox = document.getElementById('favoriteCheckbox');
  checkbox.checked = !checkbox.checked;
  updateFavorite();
}

function toggleFavorites() {
  const button = document.getElementById("favoriteToggleButton");
  showOnlyFavorites = !showOnlyFavorites;

  if (showOnlyFavorites) {
    verses = originalVerses.filter(v => v.favorite);
    button.textContent = "모두";
  } else {
    verses = [...originalVerses];
    button.textContent = "즐찾";
  }
  current = 0;
  renderVerse();
  // 즐겨찾기 id 배열 반환 및 콘솔 출력
  const favIds = getFavoriteIds();
  console.log(favIds);
  return favIds;
// 즐겨찾기 id 배열 반환 및 콘솔 출력
}

// 스와이프 감지
let startX = 0;
let endX = 0;
const verseContainer = document.getElementById('verseContainer');
// 화면 전체에 이벤트 적용
document.addEventListener('touchstart', e => {
  if (e.target.type === 'checkbox') return;
  startX = e.touches[0].clientX;
});

document.addEventListener('touchend', e => {
  if (e.target.type === 'checkbox') return;
  endX = e.changedTouches[0].clientX;
  handleSwipe();
});

document.addEventListener('mousedown', e => {
  if (e.target.type === 'checkbox') return;
  startX = e.clientX;
});

document.addEventListener('mouseup', e => {
  if (e.target.type === 'checkbox') return;
  endX = e.clientX;
  handleSwipe();
});


// 즐겨찾기 추가된 번호(id) 배열 반환 함수
function getFavoriteIds() {
  return originalVerses.filter(v => v.favorite).map(v => v.id);
}

let lastSwipeTime = 0;
let swipeCount = 0;

function handleSwipe() {
  const diff = endX - startX;
  const now = Date.now();

  // 연속 스와이프 여부 판단 (400ms 이내 두 번)
  if (Math.abs(diff) > 50) {
    if (now - lastSwipeTime < 400) {
      swipeCount++;
    } else {
      swipeCount = 1;
    }

    lastSwipeTime = now;

    if (swipeCount >= 2) {
      // 두 번 빠르게 스와이프하면 10칸 점프
      if (diff > 0) {
        jumpVerse(-10); // 오른쪽으로 스와이프 = 이전
      } else {
        jumpVerse(10); // 왼쪽으로 스와이프 = 다음
      }
      swipeCount = 0; // 리셋
    } else {
      // 일반 스와이프
      diff > 0 ? prevVerse() : nextVerse();
    }
  }
}

function jumpVerse(step) {
  applyAnimation(step > 0 ? 'left' : 'right');
  current = (current + step + verses.length) % verses.length;
  renderVerse();
}

// 편집
let isEditing = false;

function toggleEditMode() {
  const editContainer = document.getElementById('editContainer');
  const textarea = document.getElementById('editTextarea');
  isEditing = !isEditing;

  if (isEditing) {
    const str = originalVerses.map(v => `${v.title}| ${v.text}`).join('\n');
    textarea.value = str;
    editContainer.style.display = 'flex';
  } else {
    editContainer.style.display = 'none';
  }
}

function saveEditedVerses() {
  const editedText = document.getElementById('editTextarea').value.trim();
  const lines = editedText.split('\n').filter(line => line.trim() !== '');
  const isValid = lines.every(line => {
    const parts = line.split('|');
    return parts.length === 2 && parts[0].trim() && parts[1].trim();
  });

  if (!isValid) {
    showFormatError();
    return;
  }

  const newVerses = lines.map((line, idx) => {
    const [title, text] = line.split('|').map(str => str.trim());
    return { id: idx, title, text, favorite: false };
  });

  for (let v of newVerses) {
    const existing = originalVerses.find(o => o.title === v.title && o.text === v.text);
    if (existing) v.favorite = existing.favorite;
  }

  originalVerses = [...newVerses];
  verses = showOnlyFavorites ? originalVerses.filter(v => v.favorite) : [...originalVerses];

  // 저장
  saveVersesToStorage(originalVerses);
  localStorage.setItem(STORAGE_KEY_FAVORITES, JSON.stringify(originalVerses.filter(v => v.favorite).map(v => v.id)));

  current = 0;
  toggleEditMode();
  renderVerse();
}

function cancelEdit() {
  toggleEditMode();
}

function resetToOriginal() {
  const textarea = document.getElementById('editTextarea');
  textarea.value = originalVersesStr.trim();
}

function showFormatError() {
  if (!document.getElementById('formatErrorBox')) {
    const errorBox = document.createElement('div');
    errorBox.id = 'formatErrorBox';
    errorBox.style.position = 'fixed';
    errorBox.style.top = '50%';
    errorBox.style.left = '50%';
    errorBox.style.transform = 'translate(-50%, -50%)';
    errorBox.style.backgroundColor = '#2a2a2a';
    errorBox.style.color = '#fff';
    errorBox.style.padding = '20px';
    errorBox.style.borderRadius = '10px';
    errorBox.style.zIndex = '10';
    errorBox.style.textAlign = 'center';
    errorBox.innerHTML = `
      <p>편집 형식에 <br>어긋나게 편집하셨네요.<br>죄송하지만 창을 닫습니다.</p>
      <button id="formatErrorOkButton" style="margin-top:15px; padding:8px 20px; border:none; border-radius:5px; background:#FFD95A; color:#121212; font-weight:bold; cursor:pointer;">확인</button>
    `;
    document.body.appendChild(errorBox);
    document.getElementById('formatErrorOkButton').onclick = () => {
      errorBox.remove();
      toggleEditMode();
    };
  }
}

// 최초 렌더링
renderVerse();


//음악플레이어

  const originalVersesStr2 = originalVersesStr.trim();

  const verses2 = originalVersesStr2.split('\n').map((line, index) => {
    const [titlePart] = line.split('|');
    return {
      title: titlePart.trim(),
      url: `https://yh7004lee.github.io/mp3/${index + 1}.mp3`
    };
  });

  const audio = document.getElementById('audio');
  const progressBar = document.getElementById('progress-bar');
  const verseTitle2 = document.getElementById('verse-title');
  const playlistOverlay = document.getElementById('playlist-overlay');
  const playlistCheckboxes = document.getElementById('playlist-checkboxes');
  const audioData = verses2; // 자동 생성된 데이터를 그대로 사용

  let currentTrack = 0;
  let selectedTracks = [];
  let playAllLoop = false;
  let selectToggle = false;

function loadAudio(index) {
  if (index >= selectedTracks.length) return;

  // 현재 재생 중이면 정지
  audio.pause();
  audio.currentTime = 0;

  currentTrack = index;
  const track = selectedTracks[index];
  audio.src = track.url;
  verseTitle2.textContent = track.title;
  audio.load();
}



let isPlaying = false; // 현재 재생 중인지 여부
let hasStarted = false; // 선택된 트랙을 로드하고 재생한 적 있는지

function playAudio() {
  const toggleBtn = document.getElementById("togglePlayBtn");

  if (!isPlaying) {
    // 처음 재생이거나, 일시정지 상태에서 다시 재생
    if (!hasStarted) {
      // 처음 재생 시: 선택된 트랙을 설정
      const checkboxes = playlistCheckboxes.querySelectorAll('input[type="checkbox"]');
      selectedTracks = [];
      checkboxes.forEach((cb, index) => {
        if (cb.checked) {
          selectedTracks.push(audioData[index]);
        }
      });

      if (selectedTracks.length === 0) {
        alert("재생할 항목을 선택해주세요.");
        return;
      }

      currentTrack = 0;
      playAllLoop = true;
      loadAudio(currentTrack);
      hasStarted = true;
    }

    audio.play();
     syncVerseWithAudio(); // 재생 시 제목 기반으로 말씀 싱크
    isPlaying = true;
    toggleBtn.textContent = "멈춤";
    document.getElementById("player-bar").style.display = "block";
  } else {
    // 재생 중일 때: 일시 정지
    audio.pause();
    isPlaying = false;
    toggleBtn.textContent = "재생";
  }
}

function syncVerseWithAudio() {
  const audioTitleEl = document.querySelector('#player-bar #verse-title');
  if (!audioTitleEl) return;

  const titleText = audioTitleEl.textContent || '';
  const numberMatch = titleText.match(/^(\d{1,2})\./); // 앞 숫자+점 매칭
  if (!numberMatch) return;

  const verseNumber = parseInt(numberMatch[1], 10);
  const index = verseNumber - 1;

  if (index >= 0 && index < originalVerses.length) {
    current = index;
    renderVerse(); // 화면의 말씀 제목/내용 업데이트
  }
}

function pauseAudio() {
  audio.pause();
  audio.src = "";
  audio.load();

  progressBar.style.width = "0%";

  isPlaying = false;
  hasStarted = false;
  selectedTracks = [];
  currentTrack = 0;
  playAllLoop = false;

  const toggleBtn = document.getElementById("togglePlayBtn");
  toggleBtn.textContent = "재생";
}

  function stopAll() {
  audio.pause();
  audio.src = "";
  audio.load();

  verseTitle2.textContent = "";
  progressBar.style.width = "0%";

  document.getElementById("player-bar").style.display = "none";
  document.getElementById("playlist-overlay").style.display = "none";

  // 🔧 상태 변수 초기화
  isPlaying = false;
  hasStarted = false;
  playAllLoop = false;
  selectedTracks = [];
  currentTrack = 0;

  const toggleBtn = document.getElementById("togglePlayBtn");
  toggleBtn.textContent = "재생";
}

  function togglePlaylist() {
    playlistOverlay.style.display = playlistOverlay.style.display === 'block' ? 'none' : 'block';
  }

  function hidePlaylist() {
    playlistOverlay.style.display = 'none';
  }

function clearAllSelection() {
  const checkboxes = playlistCheckboxes.querySelectorAll('input[type="checkbox"]');
  checkboxes.forEach(cb => cb.checked = false);
}

// renderPlaylist 수정: 라벨 클릭 시 자동 체크 처리
function renderPlaylist() {
  playlistCheckboxes.innerHTML = '';
  audioData.forEach((item, index) => {
    const div = document.createElement('div');
    div.className = 'playlist-item';
    div.innerHTML = `
      <input type="checkbox" id="track-${index}" checked>
      <label for="track-${index}" onclick="document.getElementById('track-${index}').checked = !document.getElementById('track-${index}').checked">${item.title}</label>
    `;
    playlistCheckboxes.appendChild(div);
  });
}

function toggleSelectAll() {
  const checkboxes = document.querySelectorAll('#playlist-checkboxes input[type="checkbox"]');
  checkboxes.forEach(cb => cb.checked = true);
}

  function applySelected() {
    const checkboxes = playlistCheckboxes.querySelectorAll('input[type="checkbox"]');
    selectedTracks = [];
    checkboxes.forEach((cb, index) => {
      if (cb.checked) {
        selectedTracks.push(audioData[index]);
      }
    });
    if (selectedTracks.length > 0) {
      document.getElementById("player-bar").style.display = "block";
      loadAudio(0);
      playAudio();
      playAllLoop = true;
    }
  }






audio.addEventListener('ended', () => {
  if (playAllLoop) {
    currentTrack++;
    if (currentTrack >= selectedTracks.length) {
      currentTrack = 0; // 반복재생: 마지막 곡 후 다시 첫 곡으로
    }
    loadAudio(currentTrack);
    audio.play(); // 🔁 곡 재생
  }
});


const audioElement = document.getElementById('audio');

audioElement.addEventListener('ended', () => {
  current = (current + 1) % verses.length; // 다음 말씀으로 이동
    syncVerseWithAudio(); // 재생 시 제목 기반으로 말씀 싱크
    audio.play(); // 🔁 곡 재생
});


  audio.addEventListener('timeupdate', () => {
    if (audio.duration) {
      const percent = (audio.currentTime / audio.duration) * 100;
      progressBar.style.width = percent + '%';
    }
  });

  renderPlaylist();
  loadAudio(0);


//멈춤오류방지

let retryCount = 0;

audio.addEventListener('error', () => {
  if (retryCount < 3) {
    console.log(`재시도 중... (${retryCount + 1}회)`);
    loadAudio(currentTrack);  // 현재 트랙 다시 로드
    audio.play();             // 재생 시도
    retryCount++;
  } else {
    console.log("재시도 실패, 다음 트랙으로 이동");
    retryCount = 0;
    currentTrack++;           // 다음 트랙으로 이동

    // 루프 재생: 끝나면 처음으로 돌아감
    if (currentTrack >= selectedTracks.length) {
      currentTrack = 0;
    }

    loadAudio(currentTrack);  // 다음 (또는 첫 번째) 트랙 로드
    audio.play();             // 재생
  }
});

function checkPlaylistByIds(ids) {
  const checkboxes = document.querySelectorAll('#playlist-checkboxes input[type="checkbox"]');
  checkboxes.forEach((checkbox, index) => {
    checkbox.checked = ids.includes(index);
  });
}

function favoritePlayer() {
  const favIds = getFavoriteIds();
  if (favIds.length === 0) {
    alert("즐겨찾기된 말씀이 없습니다.");
    return;
  }
 hideSettingsMenu()
  // 음악 목록 체크박스 열기
  togglePlaylist();

  // 체크박스 체크
  setTimeout(() => {
    checkPlaylistByIds(favIds);

    // 선택 적용 (자동으로 applySelected를 실행할 수도 있음)
    applySelected();
hidePlaylist()
    // 음악 재생
   syncVerseWithAudio(); // 재생 시 제목 기반으로 말씀 싱크
  audio.play(); // 재생 시작

  }, 300); // UI 반영 시간 약간 대기
}

function showPlayer() {
  document.getElementById('player-bar').style.display = 'block';

  // 모든 체크박스를 체크 상태로 설정
  const checkboxes = playlistCheckboxes.querySelectorAll('input[type="checkbox"]');
  checkboxes.forEach(cb => cb.checked = true);

  // 전체 트랙을 선택
  selectedTracks = [...audioData];
  currentTrack = 0;
  playAllLoop = true;

  loadAudio(currentTrack); // 첫 번째 트랙 로드
   syncVerseWithAudio(); // 재생 시 제목 기반으로 말씀 싱크
  audio.play(); // 재생 시작
  const toggleBtn = document.getElementById("togglePlayBtn");
  toggleBtn.textContent = "멈춤";

  hasStarted = true; // ✅ 이 줄을 추가해서 중복 초기화 방지
  isPlaying = true;  // ✅ 현재 재생 중 상태로 설정
  hideSettingsMenu(); // 설정창 닫기
}

// 화면이 꺼졌을 때 처리
document.addEventListener('visibilitychange', () => {
  if (document.hidden) { // 화면이 꺼졌을 때
    // audio.play()을 강제로 호출하여 재생 상태를 유지해야 합니다.
    // 사용자 제스처가 필요한 경우, 이벤트에 따라 audio.play()를 호출합니다.
    audio.play();
  } else { // 화면이 켜졌을 때
    // 필요한 경우, 재생을 일시 정지하거나 볼륨을 조절할 수 있습니다.
  }
});

</script>

<script>
function openHelpPopup() {
  hideSettingsMenu()
  if (document.getElementById("helpPopup")) return;

  const popupOverlay = document.createElement("div");
  popupOverlay.id = "helpPopup";
  popupOverlay.className = "help-popup-overlay";

  const popupContent = document.createElement("div");
  popupContent.className = "help-popup-container";

  popupContent.innerHTML = `
    <div class="help-title">만든이 : 낭만고양이</div>
    <div class="help-title">버전 : 성경암송 60구절 v1.0</div>
    <div class="help-title">최종수정일 : 2025.06.01</div>
  
    <textarea class="help-textarea" readonly>
📝성경암송 60구절 설명서

1.숨겨/보여 : 말씀 내용을 숨기거나 보이도록 합니다.

2.랜덤/순차 : 말씀 보이는 순서를 섞어서 랜덤으로 나오게 하거나, 순차적으로 나오게 합니다.

3.즐찾/모두 : 모든 말씀이 나오게 하거나, 즐겨찾기에 추가된 말씀만 나오도록 설정할 수 있습니다.

4.설정/말씀 편집하기 : 말씀을 편집하거나 추가할 수 있습니다. 전문가 모드이므로 자신 있는 분들만 시도해 주세요. 웬만하면 기존 말씀을 삭제하지 마시고, 새로운 말씀을 추가하는 방식으로 사용해 주세요. 말씀을 삭제하면 ‘말씀 듣기’ 기능을 사용할 수 없을 수도 있습니다. 그리고 추가된 말씀은 오디오가 제공되지 않습니다. 참고해 주세요.

5.설정/전체 말씀 듣기 : 60개의 말씀을 순차적으로 반복 재생합니다. 음악 플레이어가 뜨면 목록을 클릭해서 원하는 말씀을 선택한 후 ‘적용’을 누르면, 체크된 말씀만 재생됩니다.

6.설정/즐겨찾기 말씀 듣기 : 즐겨찾기에 추가된 말씀만 순차적으로 반복 재생합니다.

7.유용한 기능 : 손가락으로 좌우로 천천히 넘기면 말씀이 한 단계씩 변합니다. 하지만 빠르게 두 번 연속 넘기면 10개씩 단번에 넘어갑니다.
    </textarea>
    <div class="help-button-box">
      <button class="help-close-btn" onclick="closeHelpPopup()">닫기</button>
    </div>
  `;

  popupOverlay.appendChild(popupContent);
  document.body.appendChild(popupOverlay);

  if (!document.getElementById("helpPopupStyle")) {
    const style = document.createElement("style");
    style.id = "helpPopupStyle";
    style.textContent = `
/* 팝업 전체 화면 덮기 */
.help-popup-overlay {
  position: fixed;
  top: 0; left: 0;
  width: 100%; height: 100%;
  background-color: rgba(10, 10, 10, 0.95);
  display: flex;
  justify-content: center;
  align-items: center; /* stretch → center로 변경해서 중앙 정렬 */
  padding: 5px; /* 가장자리 여백 추가 */
  z-index: 9999;
  box-sizing: border-box;
  overflow: auto; /* 혹시 넘칠 때 스크롤 */
}

/* 팝업 본체 */
.help-popup-container {
  background-color: #1c1c1c;
  border-radius: 8px; /* 살짝 둥글게 */
  padding: 5px 0 10px 0;
  width: 100%;
  height: 100%; 

  box-sizing: border-box;
  color: #e0e0e0;
  font-family: 'Segoe UI', sans-serif;
  font-size: 14px;
  line-height: 1.4;
  display: flex;
  flex-direction: column;
}

/* 제목 줄 */
.help-title {
  margin: 2px 0 2px 0;
  font-size: 14px;
  color: #ffffff;
  padding-left: 4px;
   line-height: 1.2;

}

.help-textarea {
  flex: 1;
  width: 100%;
  resize: none;
  overflow-y: auto;
  background-color: #2a2a2a;
  color: #ffffff;
  border: 1px solid #555;
  border-radius: 4px;
  padding: 12px;
  font-size: 14px;
  box-sizing: border-box;
  line-height: 1.4;
  margin-top: 10px;
  min-height: 200px; /* 기본값, 화면에 따라 커짐 */
  max-height: none;  /* 최대 높이 제한 해제 */
}

/* 닫기 버튼 영역 */
.help-button-box {
  text-align: right;
  margin: 15px 10px 0 0;
}

/* 닫기 버튼 */
.help-close-btn {
  background-color: #3a3a3a;
  color: #ffffff;
  border: none;
  padding: 8px 20px;
  border-radius: 6px;
  font-size: 14px;
  cursor: pointer;
  transition: background-color 0.2s;
}

.help-close-btn:hover {
  background-color: #555;
}
`;
    document.head.appendChild(style);
  }
}

function closeHelpPopup() {
  const popup = document.getElementById("helpPopup");
  if (popup) popup.remove();

location.reload(true);
}
</script>

<script>
function adjustPlaylistMaxHeight() {
  const offset = 170; // 상단 header 등 차지하는 높이
  const viewportHeight = window.innerHeight; // 실제 사용할 수 있는 높이
  const maxHeight = viewportHeight - offset;

  const el = document.getElementById('playlist-checkboxes');
  if (el) {
    el.style.maxHeight = `${maxHeight}px`;
  }
}

window.addEventListener('load', adjustPlaylistMaxHeight);
window.addEventListener('resize', adjustPlaylistMaxHeight);

</script>

</body>
</html>
