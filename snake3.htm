<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>말씀 스네이크 게임</title>
  <style>
  body {
    font-family: 'Segoe UI', 'Arial', sans-serif;
    background: #1a1d24; /* 어둡지만 블루그레이 기운 */
    color: #e0f7fa;
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 0 10px;
  }

  canvas {
    background: #21262e;
    border: 3px solid #f39c12;
    margin-top: 15px;
    width: calc(100vw - 20px);
    height: calc(100vw - 20px);
    max-width: 500px;
    max-height: 500px;
    border-radius: 0px;
  }

  h1 {
    color: #00e0d3;
    margin: 5px 0;
    font-size: 24px;
  }

  #verseTitle {
    color: #fff;
    font-size: 20px;
    margin-bottom: 5px;
  }

  #modeDisplay {
    color: #00e0d3;
    font-size: 16px;
    margin: 5px 0;
  }

  button {
    padding: 8px 14px;
   font-size: 0.95rem; 
    margin: 5px;
    border: none;
    border-radius: 10px;
    background: #2a2f3a;
    color: #e0f7fa;
    font-weight: 500;
    cursor: pointer;
    flex: 1;
    transition: background 0.2s, transform 0.1s;
  }

  button:hover {
    background: #39414f;
  
  }

  button.selected {
    background-color: #00e0d3;
    color: #1a1d24;
    font-weight: bold;
box-shadow: 0 0 10px #00e0d3, 0 0 20px #00e0d3;

  }

  .controls, .speed-select {
    display: flex;
    gap: 10px;
    flex-wrap: nowrap;
    justify-content: space-between;
    margin-top: 10px;
    width: 100%;
    max-width: 500px;
  }

  #verse {
    margin-top: 10px;
    font-size: 18px;
    text-align: center;
    max-width: 90vw;
    color: #b2ebf2;
  }

.controls button {
  font-size: 18px; /* 글꼴 크기 키우기 */
  padding: 7px 10px;    /* 패딩 키워서 버튼도 커지게 */
  flex: 1;
}
#navButtons {
    display: flex;
    gap: 10px;
    flex-wrap: nowrap;
    justify-content: space-between;
    margin: 10px 0 15px 0;
    width: 100%;
    max-width: 500px;
}
#navButtons .navBtn {
  flex: 1;
  padding: 8px 0;           /* 세로 패딩 축소 */
  font-size: 0.95rem;       /* 글자 크기 축소 */
  background-color: #2a2f3a;
  color: #f0f0f0;
  border: none;
  border-radius: 10px;
  cursor: pointer;
  user-select: none;
  transition: background-color 0.3s ease;
  margin: 5px;                /* 불필요한 마진 제거 */
}
    #navButtons .navBtn:hover {
      background-color: #39414f;
    }  
 .navBtn.active {
  background-color: #03dac6 !important;
  color: #000000 !important;
font-weight: bold;
box-shadow: 0 0 10px #00e0d3, 0 0 20px #00e0d3;
}
</style>

</head>
<body>
  <!-- 상단 네비게이션 버튼 -->
  <div id="navButtons" style="display:flex; gap:8px; margin-top:10px;">

    <button class="navBtn" onclick="goToPrev()"> 이전</button>
<button id="allVersesBtn" class="navBtn active">모두</button>
<button id="favVersesBtn" class="navBtn">즐찾</button>
    <button class="navBtn" onclick="goToNext()"> 다음</button>
   
  </div>

  <div id="verseTitle"></div>
<div class="speed-select">
  <button id="btn-beginner" onclick="setSpeed(400, '초보', this)">초보</button>
  <button id="btn-intermediate" onclick="setSpeed(250, '중수', this)">중수</button>
  <button id="btn-advanced" onclick="setSpeed(150, '고수', this)">고수</button>
  <button id="btn-master" onclick="setSpeed(80, '초인', this)">초인</button>
</div>
  <div id="modeDisplay" style="display: none;">현재 모드: 초보 모드입니다.</div>

  <canvas id="game" width="300" height="300"></canvas>

  <div class="controls">
    <button onclick="setDirection('up')">⇧</button>  
    <button onclick="setDirection('down')">⇩</button>
  <button onclick="setDirection('left')">⇦</button>
    <button onclick="setDirection('right')">⇨</button>
  </div>

  <div id="verse"></div>

  <script>
  const STORAGE_KEY_VERSES = 'savedVerses2';
  const canvas = document.getElementById('game');
  const ctx = canvas.getContext('2d');
  const gridSize = 10;

  let verses = [];
  let currentStage = 0;
  let verseWords = [];
  let wordIndex = 0;
  let collectedWords = [];
  let intervalId = null;
  let currentSpeed = 400;

  let snake = [{ x: 5, y: 5 }];
  let dir = { x: 0, y: 0 };
  let foods = [];

  const modeWordCounts = {
    '초보': 2,
    '중수': 3,
    '고수': 4,
    '초인': 5
  };

  let currentMode = '초보';

  function setSpeed(speed, label, btnElement = null) {
    currentSpeed = speed;
    currentMode = label;
    document.getElementById('modeDisplay').innerText = `현재 모드: ${label} 모드입니다.`;
    if (intervalId) clearInterval(intervalId);
    intervalId = setInterval(update, currentSpeed);

    const buttons = document.querySelectorAll('.speed-select button');
    buttons.forEach(btn => btn.classList.remove('selected'));
    if (btnElement) btnElement.classList.add('selected');

    loadStage();
  }

  function setDirection(d) {
    if (d === 'up' && dir.y !== 1) dir = { x: 0, y: -1 };
    if (d === 'down' && dir.y !== -1) dir = { x: 0, y: 1 };
    if (d === 'left' && dir.x !== 1) dir = { x: -1, y: 0 };
    if (d === 'right' && dir.x !== -1) dir = { x: 1, y: 0 };
  }

  function loadStage() {
    if (currentStage >= verses.length) {
      alert('👏 모든 말씀을 완료했습니다!');
      document.getElementById('verseTitle').innerText = '';
      document.getElementById('verse').innerText = '';
      if (intervalId) clearInterval(intervalId);
      return;
    }
    const verse = verses[currentStage];
    document.getElementById('verseTitle').innerText = ` ${verse.title}`;
    const cleanedText = verse.text.replace(/\[.*?\]/g, '').trim();
    verseWords = cleanedText.split(/\s+/);

    wordIndex = 0;
    collectedWords = [];
    resetSnake();
    placeFoods();
    draw();
  }

  function resetSnake() {
    snake = [{ x: 5, y: 5 }];
    dir = { x: 0, y: 0 };
    foods = [];
  }

  function checkOverlap(newFood, existingFoods) {
    const padding = 2;
    const textWidth = ctx.measureText(newFood.word).width;
    const newX = newFood.x * gridSize;
    const newY = newFood.y * gridSize;

    return existingFoods.some(f => {
      const fx = f.x * gridSize;
      const fy = f.y * gridSize;
      const fw = ctx.measureText(f.word).width;
      return !(newX + textWidth + padding < fx || newX > fx + fw + padding || newY !== fy);
    });
  }

  function placeFoods() {
    foods = [];
    const wordCount = modeWordCounts[currentMode] || 2;

    let wordsToShow = [];
    if (wordIndex < verseWords.length) {
      wordsToShow.push({ word: verseWords[wordIndex], correct: true });
    } else {
      return;
    }

    let wrongCandidates = verseWords.filter((w, i) => i !== wordIndex);
    while (wordsToShow.length < wordCount && wrongCandidates.length > 0) {
      const idx = Math.floor(Math.random() * wrongCandidates.length);
      wordsToShow.push({ word: wrongCandidates[idx], correct: false });
      wrongCandidates.splice(idx, 1);
    }

    wordsToShow = shuffleArray(wordsToShow);

    for (let i = 0; i < wordsToShow.length; i++) {
      let pos;
      let attempts = 0;
      do {
        pos = {
          x: Math.floor(Math.random() * (canvas.width / gridSize)),
          y: Math.floor(Math.random() * (canvas.height / gridSize))
        };
        attempts++;
        if (attempts > 100) break; // 무한 루프 방지
      } while (
        snake.some(s => s.x === pos.x && s.y === pos.y) ||
        foods.some(f => f.x === pos.x && f.y === pos.y) ||
        checkOverlap({ ...pos, word: wordsToShow[i].word }, foods)
      );
      foods.push({ ...pos, word: wordsToShow[i].word, correct: wordsToShow[i].correct });
    }
  }

  function shuffleArray(arr) {
    for (let i = arr.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
  }

  function draw() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.fillStyle = '#2ecc71';
    for (let s of snake) {
      ctx.fillRect(s.x * gridSize, s.y * gridSize, gridSize, gridSize);
    }
    ctx.fillStyle = '#e74c3c';
    ctx.font = 'bold 12px Arial';

    const padding = 5;
    for (let f of foods) {
      let textWidth = ctx.measureText(f.word).width;
      let wordX = f.x * gridSize + padding;
      if (wordX + textWidth > canvas.width - padding) {
        wordX = canvas.width - textWidth - padding;
      }
      ctx.fillText(f.word, wordX, f.y * gridSize + 10);
    }
  }

  function update() {
    if (dir.x === 0 && dir.y === 0) return;

    const head = { x: snake[0].x + dir.x, y: snake[0].y + dir.y };
    if (
      head.x < 0 ||
      head.y < 0 ||
      head.x >= canvas.width / gridSize ||
      head.y >= canvas.height / gridSize ||
      snake.some(s => s.x === head.x && s.y === head.y)
    ) {
      alert('게임 오버!');
      loadStage();
      return;
    }

    snake.unshift(head);

    const foodIndex = foods.findIndex(f => f.x === head.x && f.y === head.y);
    if (foodIndex !== -1) {
      const eaten = foods[foodIndex];
      const target = verseWords[wordIndex];

      const isCorrect = eaten.correct && (target.startsWith(eaten.word) || target.includes(eaten.word));
      if (!isCorrect) {
        alert('틀린 단어를 먹었습니다! 게임 종료!');
        loadStage();
        return;
      } else {
        collectedWords.push(eaten.word);
        wordIndex++;
        if (wordIndex >= verseWords.length) {
          document.getElementById('verse').innerText = '🎉 완성된 말씀: ' + collectedWords.join(' ');
          alert('말씀을 완성했습니다!');
          currentStage++;
          loadStage();
          return;
        }
        placeFoods();
      }
    } else {
      snake.pop();
    }
    draw();
  }

  document.addEventListener('DOMContentLoaded', () => {
    const saved = localStorage.getItem(STORAGE_KEY_VERSES);
    if (!saved) {
      alert('말씀 데이터가 없습니다. localStorage에 말씀을 저장해주세요.');
      return;
    }
    verses = JSON.parse(saved);
    const beginnerButton = document.getElementById('btn-beginner');
    setSpeed(400, '초보', beginnerButton);
    loadStage();
  });

  let startX, startY;
  canvas.addEventListener('touchstart', e => {
    const touch = e.touches[0];
    startX = touch.clientX;
    startY = touch.clientY;
  });
  canvas.addEventListener('touchend', e => {
    const touch = e.changedTouches[0];
    const dx = touch.clientX - startX;
    const dy = touch.clientY - startY;
    if (Math.abs(dx) > Math.abs(dy)) {
      dx > 0 ? setDirection('right') : setDirection('left');
    } else {
      dy > 0 ? setDirection('down') : setDirection('up');
    }
  });

  document.addEventListener('keydown', e => {
    switch (e.key) {
      case 'ArrowUp':
        setDirection('up');
        break;
      case 'ArrowDown':
        setDirection('down');
        break;
      case 'ArrowLeft':
        setDirection('left');
        break;
      case 'ArrowRight':
        setDirection('right');
        break;
    }
  });

  let showingFavorites = false;

  document.getElementById('allVersesBtn').addEventListener('click', () => {
    showingFavorites = false;
    document.getElementById('allVersesBtn').classList.add('active');
    document.getElementById('favVersesBtn').classList.remove('active');
    const saved = localStorage.getItem(STORAGE_KEY_VERSES);
    if (saved) {
      verses = JSON.parse(saved);
      currentStage = 0;
      loadStage();
    }
  });

  document.getElementById('favVersesBtn').addEventListener('click', () => {
    showingFavorites = true;
    document.getElementById('favVersesBtn').classList.add('active');
    document.getElementById('allVersesBtn').classList.remove('active');

    const saved = localStorage.getItem(STORAGE_KEY_VERSES);
    if (saved) {
      const all = JSON.parse(saved);
      verses = all.filter(v => v.favorite);
      currentStage = 0;
      loadStage();
    }
  });

  function goToPrev() {
    if (currentStage > 0) {
      currentStage--;
      loadStage();
    }
  }

  function goToNext() {
    if (currentStage < verses.length - 1) {
      currentStage++;
      loadStage();
    }
  }
</script>


</body>
</html>
